
temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000440c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08004548  08004548  00014548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800460c  0800460c  0001460c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004614  08004614  00014614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004618  08004618  00014618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  0800461c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000c8  20000070  0800468c  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000138  0800468c  00020138  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000b45b  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001ca7  00000000  00000000  0002b4f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000009f0  00000000  00000000  0002d1a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000910  00000000  00000000  0002db90  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00016965  00000000  00000000  0002e4a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000094cd  00000000  00000000  00044e05  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00086a27  00000000  00000000  0004e2d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000f7  00000000  00000000  000d4cf9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002c9c  00000000  00000000  000d4df0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	08004530 	.word	0x08004530

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	08004530 	.word	0x08004530

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_frsub>:
 800018c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000190:	e002      	b.n	8000198 <__addsf3>
 8000192:	bf00      	nop

08000194 <__aeabi_fsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000198 <__addsf3>:
 8000198:	0042      	lsls	r2, r0, #1
 800019a:	bf1f      	itttt	ne
 800019c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001a0:	ea92 0f03 	teqne	r2, r3
 80001a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001ac:	d06a      	beq.n	8000284 <__addsf3+0xec>
 80001ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001b6:	bfc1      	itttt	gt
 80001b8:	18d2      	addgt	r2, r2, r3
 80001ba:	4041      	eorgt	r1, r0
 80001bc:	4048      	eorgt	r0, r1
 80001be:	4041      	eorgt	r1, r0
 80001c0:	bfb8      	it	lt
 80001c2:	425b      	neglt	r3, r3
 80001c4:	2b19      	cmp	r3, #25
 80001c6:	bf88      	it	hi
 80001c8:	4770      	bxhi	lr
 80001ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001d6:	bf18      	it	ne
 80001d8:	4240      	negne	r0, r0
 80001da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001e6:	bf18      	it	ne
 80001e8:	4249      	negne	r1, r1
 80001ea:	ea92 0f03 	teq	r2, r3
 80001ee:	d03f      	beq.n	8000270 <__addsf3+0xd8>
 80001f0:	f1a2 0201 	sub.w	r2, r2, #1
 80001f4:	fa41 fc03 	asr.w	ip, r1, r3
 80001f8:	eb10 000c 	adds.w	r0, r0, ip
 80001fc:	f1c3 0320 	rsb	r3, r3, #32
 8000200:	fa01 f103 	lsl.w	r1, r1, r3
 8000204:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000208:	d502      	bpl.n	8000210 <__addsf3+0x78>
 800020a:	4249      	negs	r1, r1
 800020c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000210:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000214:	d313      	bcc.n	800023e <__addsf3+0xa6>
 8000216:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800021a:	d306      	bcc.n	800022a <__addsf3+0x92>
 800021c:	0840      	lsrs	r0, r0, #1
 800021e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000222:	f102 0201 	add.w	r2, r2, #1
 8000226:	2afe      	cmp	r2, #254	; 0xfe
 8000228:	d251      	bcs.n	80002ce <__addsf3+0x136>
 800022a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800022e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000232:	bf08      	it	eq
 8000234:	f020 0001 	biceq.w	r0, r0, #1
 8000238:	ea40 0003 	orr.w	r0, r0, r3
 800023c:	4770      	bx	lr
 800023e:	0049      	lsls	r1, r1, #1
 8000240:	eb40 0000 	adc.w	r0, r0, r0
 8000244:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000248:	f1a2 0201 	sub.w	r2, r2, #1
 800024c:	d1ed      	bne.n	800022a <__addsf3+0x92>
 800024e:	fab0 fc80 	clz	ip, r0
 8000252:	f1ac 0c08 	sub.w	ip, ip, #8
 8000256:	ebb2 020c 	subs.w	r2, r2, ip
 800025a:	fa00 f00c 	lsl.w	r0, r0, ip
 800025e:	bfaa      	itet	ge
 8000260:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000264:	4252      	neglt	r2, r2
 8000266:	4318      	orrge	r0, r3
 8000268:	bfbc      	itt	lt
 800026a:	40d0      	lsrlt	r0, r2
 800026c:	4318      	orrlt	r0, r3
 800026e:	4770      	bx	lr
 8000270:	f092 0f00 	teq	r2, #0
 8000274:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000278:	bf06      	itte	eq
 800027a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800027e:	3201      	addeq	r2, #1
 8000280:	3b01      	subne	r3, #1
 8000282:	e7b5      	b.n	80001f0 <__addsf3+0x58>
 8000284:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000288:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800028c:	bf18      	it	ne
 800028e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000292:	d021      	beq.n	80002d8 <__addsf3+0x140>
 8000294:	ea92 0f03 	teq	r2, r3
 8000298:	d004      	beq.n	80002a4 <__addsf3+0x10c>
 800029a:	f092 0f00 	teq	r2, #0
 800029e:	bf08      	it	eq
 80002a0:	4608      	moveq	r0, r1
 80002a2:	4770      	bx	lr
 80002a4:	ea90 0f01 	teq	r0, r1
 80002a8:	bf1c      	itt	ne
 80002aa:	2000      	movne	r0, #0
 80002ac:	4770      	bxne	lr
 80002ae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002b2:	d104      	bne.n	80002be <__addsf3+0x126>
 80002b4:	0040      	lsls	r0, r0, #1
 80002b6:	bf28      	it	cs
 80002b8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002bc:	4770      	bx	lr
 80002be:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002c2:	bf3c      	itt	cc
 80002c4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002c8:	4770      	bxcc	lr
 80002ca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002ce:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002d6:	4770      	bx	lr
 80002d8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002dc:	bf16      	itet	ne
 80002de:	4608      	movne	r0, r1
 80002e0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002e4:	4601      	movne	r1, r0
 80002e6:	0242      	lsls	r2, r0, #9
 80002e8:	bf06      	itte	eq
 80002ea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ee:	ea90 0f01 	teqeq	r0, r1
 80002f2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002f6:	4770      	bx	lr

080002f8 <__aeabi_ui2f>:
 80002f8:	f04f 0300 	mov.w	r3, #0
 80002fc:	e004      	b.n	8000308 <__aeabi_i2f+0x8>
 80002fe:	bf00      	nop

08000300 <__aeabi_i2f>:
 8000300:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000304:	bf48      	it	mi
 8000306:	4240      	negmi	r0, r0
 8000308:	ea5f 0c00 	movs.w	ip, r0
 800030c:	bf08      	it	eq
 800030e:	4770      	bxeq	lr
 8000310:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000314:	4601      	mov	r1, r0
 8000316:	f04f 0000 	mov.w	r0, #0
 800031a:	e01c      	b.n	8000356 <__aeabi_l2f+0x2a>

0800031c <__aeabi_ul2f>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	f04f 0300 	mov.w	r3, #0
 8000328:	e00a      	b.n	8000340 <__aeabi_l2f+0x14>
 800032a:	bf00      	nop

0800032c <__aeabi_l2f>:
 800032c:	ea50 0201 	orrs.w	r2, r0, r1
 8000330:	bf08      	it	eq
 8000332:	4770      	bxeq	lr
 8000334:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000338:	d502      	bpl.n	8000340 <__aeabi_l2f+0x14>
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	ea5f 0c01 	movs.w	ip, r1
 8000344:	bf02      	ittt	eq
 8000346:	4684      	moveq	ip, r0
 8000348:	4601      	moveq	r1, r0
 800034a:	2000      	moveq	r0, #0
 800034c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000350:	bf08      	it	eq
 8000352:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000356:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800035a:	fabc f28c 	clz	r2, ip
 800035e:	3a08      	subs	r2, #8
 8000360:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000364:	db10      	blt.n	8000388 <__aeabi_l2f+0x5c>
 8000366:	fa01 fc02 	lsl.w	ip, r1, r2
 800036a:	4463      	add	r3, ip
 800036c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000370:	f1c2 0220 	rsb	r2, r2, #32
 8000374:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000378:	fa20 f202 	lsr.w	r2, r0, r2
 800037c:	eb43 0002 	adc.w	r0, r3, r2
 8000380:	bf08      	it	eq
 8000382:	f020 0001 	biceq.w	r0, r0, #1
 8000386:	4770      	bx	lr
 8000388:	f102 0220 	add.w	r2, r2, #32
 800038c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000390:	f1c2 0220 	rsb	r2, r2, #32
 8000394:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000398:	fa21 f202 	lsr.w	r2, r1, r2
 800039c:	eb43 0002 	adc.w	r0, r3, r2
 80003a0:	bf08      	it	eq
 80003a2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003a6:	4770      	bx	lr

080003a8 <__aeabi_fmul>:
 80003a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003b0:	bf1e      	ittt	ne
 80003b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003b6:	ea92 0f0c 	teqne	r2, ip
 80003ba:	ea93 0f0c 	teqne	r3, ip
 80003be:	d06f      	beq.n	80004a0 <__aeabi_fmul+0xf8>
 80003c0:	441a      	add	r2, r3
 80003c2:	ea80 0c01 	eor.w	ip, r0, r1
 80003c6:	0240      	lsls	r0, r0, #9
 80003c8:	bf18      	it	ne
 80003ca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003ce:	d01e      	beq.n	800040e <__aeabi_fmul+0x66>
 80003d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003d4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003d8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003dc:	fba0 3101 	umull	r3, r1, r0, r1
 80003e0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003e4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003e8:	bf3e      	ittt	cc
 80003ea:	0049      	lslcc	r1, r1, #1
 80003ec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003f0:	005b      	lslcc	r3, r3, #1
 80003f2:	ea40 0001 	orr.w	r0, r0, r1
 80003f6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003fa:	2afd      	cmp	r2, #253	; 0xfd
 80003fc:	d81d      	bhi.n	800043a <__aeabi_fmul+0x92>
 80003fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000402:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000406:	bf08      	it	eq
 8000408:	f020 0001 	biceq.w	r0, r0, #1
 800040c:	4770      	bx	lr
 800040e:	f090 0f00 	teq	r0, #0
 8000412:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000416:	bf08      	it	eq
 8000418:	0249      	lsleq	r1, r1, #9
 800041a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800041e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000422:	3a7f      	subs	r2, #127	; 0x7f
 8000424:	bfc2      	ittt	gt
 8000426:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800042a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800042e:	4770      	bxgt	lr
 8000430:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000434:	f04f 0300 	mov.w	r3, #0
 8000438:	3a01      	subs	r2, #1
 800043a:	dc5d      	bgt.n	80004f8 <__aeabi_fmul+0x150>
 800043c:	f112 0f19 	cmn.w	r2, #25
 8000440:	bfdc      	itt	le
 8000442:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000446:	4770      	bxle	lr
 8000448:	f1c2 0200 	rsb	r2, r2, #0
 800044c:	0041      	lsls	r1, r0, #1
 800044e:	fa21 f102 	lsr.w	r1, r1, r2
 8000452:	f1c2 0220 	rsb	r2, r2, #32
 8000456:	fa00 fc02 	lsl.w	ip, r0, r2
 800045a:	ea5f 0031 	movs.w	r0, r1, rrx
 800045e:	f140 0000 	adc.w	r0, r0, #0
 8000462:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000466:	bf08      	it	eq
 8000468:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800046c:	4770      	bx	lr
 800046e:	f092 0f00 	teq	r2, #0
 8000472:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000476:	bf02      	ittt	eq
 8000478:	0040      	lsleq	r0, r0, #1
 800047a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800047e:	3a01      	subeq	r2, #1
 8000480:	d0f9      	beq.n	8000476 <__aeabi_fmul+0xce>
 8000482:	ea40 000c 	orr.w	r0, r0, ip
 8000486:	f093 0f00 	teq	r3, #0
 800048a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800048e:	bf02      	ittt	eq
 8000490:	0049      	lsleq	r1, r1, #1
 8000492:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000496:	3b01      	subeq	r3, #1
 8000498:	d0f9      	beq.n	800048e <__aeabi_fmul+0xe6>
 800049a:	ea41 010c 	orr.w	r1, r1, ip
 800049e:	e78f      	b.n	80003c0 <__aeabi_fmul+0x18>
 80004a0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004a4:	ea92 0f0c 	teq	r2, ip
 80004a8:	bf18      	it	ne
 80004aa:	ea93 0f0c 	teqne	r3, ip
 80004ae:	d00a      	beq.n	80004c6 <__aeabi_fmul+0x11e>
 80004b0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004b4:	bf18      	it	ne
 80004b6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004ba:	d1d8      	bne.n	800046e <__aeabi_fmul+0xc6>
 80004bc:	ea80 0001 	eor.w	r0, r0, r1
 80004c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c4:	4770      	bx	lr
 80004c6:	f090 0f00 	teq	r0, #0
 80004ca:	bf17      	itett	ne
 80004cc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004d0:	4608      	moveq	r0, r1
 80004d2:	f091 0f00 	teqne	r1, #0
 80004d6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004da:	d014      	beq.n	8000506 <__aeabi_fmul+0x15e>
 80004dc:	ea92 0f0c 	teq	r2, ip
 80004e0:	d101      	bne.n	80004e6 <__aeabi_fmul+0x13e>
 80004e2:	0242      	lsls	r2, r0, #9
 80004e4:	d10f      	bne.n	8000506 <__aeabi_fmul+0x15e>
 80004e6:	ea93 0f0c 	teq	r3, ip
 80004ea:	d103      	bne.n	80004f4 <__aeabi_fmul+0x14c>
 80004ec:	024b      	lsls	r3, r1, #9
 80004ee:	bf18      	it	ne
 80004f0:	4608      	movne	r0, r1
 80004f2:	d108      	bne.n	8000506 <__aeabi_fmul+0x15e>
 80004f4:	ea80 0001 	eor.w	r0, r0, r1
 80004f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000500:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000504:	4770      	bx	lr
 8000506:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800050a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800050e:	4770      	bx	lr

08000510 <__aeabi_fdiv>:
 8000510:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000514:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000518:	bf1e      	ittt	ne
 800051a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800051e:	ea92 0f0c 	teqne	r2, ip
 8000522:	ea93 0f0c 	teqne	r3, ip
 8000526:	d069      	beq.n	80005fc <__aeabi_fdiv+0xec>
 8000528:	eba2 0203 	sub.w	r2, r2, r3
 800052c:	ea80 0c01 	eor.w	ip, r0, r1
 8000530:	0249      	lsls	r1, r1, #9
 8000532:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000536:	d037      	beq.n	80005a8 <__aeabi_fdiv+0x98>
 8000538:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800053c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000540:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000544:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000548:	428b      	cmp	r3, r1
 800054a:	bf38      	it	cc
 800054c:	005b      	lslcc	r3, r3, #1
 800054e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000552:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000556:	428b      	cmp	r3, r1
 8000558:	bf24      	itt	cs
 800055a:	1a5b      	subcs	r3, r3, r1
 800055c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000560:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000564:	bf24      	itt	cs
 8000566:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800056a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800056e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000572:	bf24      	itt	cs
 8000574:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000578:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800057c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000580:	bf24      	itt	cs
 8000582:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000586:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800058a:	011b      	lsls	r3, r3, #4
 800058c:	bf18      	it	ne
 800058e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000592:	d1e0      	bne.n	8000556 <__aeabi_fdiv+0x46>
 8000594:	2afd      	cmp	r2, #253	; 0xfd
 8000596:	f63f af50 	bhi.w	800043a <__aeabi_fmul+0x92>
 800059a:	428b      	cmp	r3, r1
 800059c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005a0:	bf08      	it	eq
 80005a2:	f020 0001 	biceq.w	r0, r0, #1
 80005a6:	4770      	bx	lr
 80005a8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80005ac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005b0:	327f      	adds	r2, #127	; 0x7f
 80005b2:	bfc2      	ittt	gt
 80005b4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005b8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005bc:	4770      	bxgt	lr
 80005be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005c2:	f04f 0300 	mov.w	r3, #0
 80005c6:	3a01      	subs	r2, #1
 80005c8:	e737      	b.n	800043a <__aeabi_fmul+0x92>
 80005ca:	f092 0f00 	teq	r2, #0
 80005ce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005d2:	bf02      	ittt	eq
 80005d4:	0040      	lsleq	r0, r0, #1
 80005d6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005da:	3a01      	subeq	r2, #1
 80005dc:	d0f9      	beq.n	80005d2 <__aeabi_fdiv+0xc2>
 80005de:	ea40 000c 	orr.w	r0, r0, ip
 80005e2:	f093 0f00 	teq	r3, #0
 80005e6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ea:	bf02      	ittt	eq
 80005ec:	0049      	lsleq	r1, r1, #1
 80005ee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005f2:	3b01      	subeq	r3, #1
 80005f4:	d0f9      	beq.n	80005ea <__aeabi_fdiv+0xda>
 80005f6:	ea41 010c 	orr.w	r1, r1, ip
 80005fa:	e795      	b.n	8000528 <__aeabi_fdiv+0x18>
 80005fc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000600:	ea92 0f0c 	teq	r2, ip
 8000604:	d108      	bne.n	8000618 <__aeabi_fdiv+0x108>
 8000606:	0242      	lsls	r2, r0, #9
 8000608:	f47f af7d 	bne.w	8000506 <__aeabi_fmul+0x15e>
 800060c:	ea93 0f0c 	teq	r3, ip
 8000610:	f47f af70 	bne.w	80004f4 <__aeabi_fmul+0x14c>
 8000614:	4608      	mov	r0, r1
 8000616:	e776      	b.n	8000506 <__aeabi_fmul+0x15e>
 8000618:	ea93 0f0c 	teq	r3, ip
 800061c:	d104      	bne.n	8000628 <__aeabi_fdiv+0x118>
 800061e:	024b      	lsls	r3, r1, #9
 8000620:	f43f af4c 	beq.w	80004bc <__aeabi_fmul+0x114>
 8000624:	4608      	mov	r0, r1
 8000626:	e76e      	b.n	8000506 <__aeabi_fmul+0x15e>
 8000628:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800062c:	bf18      	it	ne
 800062e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000632:	d1ca      	bne.n	80005ca <__aeabi_fdiv+0xba>
 8000634:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000638:	f47f af5c 	bne.w	80004f4 <__aeabi_fmul+0x14c>
 800063c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000640:	f47f af3c 	bne.w	80004bc <__aeabi_fmul+0x114>
 8000644:	e75f      	b.n	8000506 <__aeabi_fmul+0x15e>
 8000646:	bf00      	nop

08000648 <__gesf2>:
 8000648:	f04f 3cff 	mov.w	ip, #4294967295
 800064c:	e006      	b.n	800065c <__cmpsf2+0x4>
 800064e:	bf00      	nop

08000650 <__lesf2>:
 8000650:	f04f 0c01 	mov.w	ip, #1
 8000654:	e002      	b.n	800065c <__cmpsf2+0x4>
 8000656:	bf00      	nop

08000658 <__cmpsf2>:
 8000658:	f04f 0c01 	mov.w	ip, #1
 800065c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000660:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000664:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000668:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800066c:	bf18      	it	ne
 800066e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000672:	d011      	beq.n	8000698 <__cmpsf2+0x40>
 8000674:	b001      	add	sp, #4
 8000676:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800067a:	bf18      	it	ne
 800067c:	ea90 0f01 	teqne	r0, r1
 8000680:	bf58      	it	pl
 8000682:	ebb2 0003 	subspl.w	r0, r2, r3
 8000686:	bf88      	it	hi
 8000688:	17c8      	asrhi	r0, r1, #31
 800068a:	bf38      	it	cc
 800068c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000690:	bf18      	it	ne
 8000692:	f040 0001 	orrne.w	r0, r0, #1
 8000696:	4770      	bx	lr
 8000698:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800069c:	d102      	bne.n	80006a4 <__cmpsf2+0x4c>
 800069e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80006a2:	d105      	bne.n	80006b0 <__cmpsf2+0x58>
 80006a4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80006a8:	d1e4      	bne.n	8000674 <__cmpsf2+0x1c>
 80006aa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80006ae:	d0e1      	beq.n	8000674 <__cmpsf2+0x1c>
 80006b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <__aeabi_cfrcmple>:
 80006b8:	4684      	mov	ip, r0
 80006ba:	4608      	mov	r0, r1
 80006bc:	4661      	mov	r1, ip
 80006be:	e7ff      	b.n	80006c0 <__aeabi_cfcmpeq>

080006c0 <__aeabi_cfcmpeq>:
 80006c0:	b50f      	push	{r0, r1, r2, r3, lr}
 80006c2:	f7ff ffc9 	bl	8000658 <__cmpsf2>
 80006c6:	2800      	cmp	r0, #0
 80006c8:	bf48      	it	mi
 80006ca:	f110 0f00 	cmnmi.w	r0, #0
 80006ce:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006d0 <__aeabi_fcmpeq>:
 80006d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d4:	f7ff fff4 	bl	80006c0 <__aeabi_cfcmpeq>
 80006d8:	bf0c      	ite	eq
 80006da:	2001      	moveq	r0, #1
 80006dc:	2000      	movne	r0, #0
 80006de:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e2:	bf00      	nop

080006e4 <__aeabi_fcmplt>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff ffea 	bl	80006c0 <__aeabi_cfcmpeq>
 80006ec:	bf34      	ite	cc
 80006ee:	2001      	movcc	r0, #1
 80006f0:	2000      	movcs	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <__aeabi_fcmple>:
 80006f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006fc:	f7ff ffe0 	bl	80006c0 <__aeabi_cfcmpeq>
 8000700:	bf94      	ite	ls
 8000702:	2001      	movls	r0, #1
 8000704:	2000      	movhi	r0, #0
 8000706:	f85d fb08 	ldr.w	pc, [sp], #8
 800070a:	bf00      	nop

0800070c <__aeabi_fcmpge>:
 800070c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000710:	f7ff ffd2 	bl	80006b8 <__aeabi_cfrcmple>
 8000714:	bf94      	ite	ls
 8000716:	2001      	movls	r0, #1
 8000718:	2000      	movhi	r0, #0
 800071a:	f85d fb08 	ldr.w	pc, [sp], #8
 800071e:	bf00      	nop

08000720 <__aeabi_fcmpgt>:
 8000720:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000724:	f7ff ffc8 	bl	80006b8 <__aeabi_cfrcmple>
 8000728:	bf34      	ite	cc
 800072a:	2001      	movcc	r0, #1
 800072c:	2000      	movcs	r0, #0
 800072e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000732:	bf00      	nop

08000734 <__aeabi_f2uiz>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	d20e      	bcs.n	8000756 <__aeabi_f2uiz+0x22>
 8000738:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800073c:	d30b      	bcc.n	8000756 <__aeabi_f2uiz+0x22>
 800073e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000742:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000746:	d409      	bmi.n	800075c <__aeabi_f2uiz+0x28>
 8000748:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800074c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000750:	fa23 f002 	lsr.w	r0, r3, r2
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr
 800075c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000760:	d101      	bne.n	8000766 <__aeabi_f2uiz+0x32>
 8000762:	0242      	lsls	r2, r0, #9
 8000764:	d102      	bne.n	800076c <__aeabi_f2uiz+0x38>
 8000766:	f04f 30ff 	mov.w	r0, #4294967295
 800076a:	4770      	bx	lr
 800076c:	f04f 0000 	mov.w	r0, #0
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop

08000774 <__aeabi_uldivmod>:
 8000774:	b953      	cbnz	r3, 800078c <__aeabi_uldivmod+0x18>
 8000776:	b94a      	cbnz	r2, 800078c <__aeabi_uldivmod+0x18>
 8000778:	2900      	cmp	r1, #0
 800077a:	bf08      	it	eq
 800077c:	2800      	cmpeq	r0, #0
 800077e:	bf1c      	itt	ne
 8000780:	f04f 31ff 	movne.w	r1, #4294967295
 8000784:	f04f 30ff 	movne.w	r0, #4294967295
 8000788:	f000 b974 	b.w	8000a74 <__aeabi_idiv0>
 800078c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000790:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000794:	f000 f806 	bl	80007a4 <__udivmoddi4>
 8000798:	f8dd e004 	ldr.w	lr, [sp, #4]
 800079c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007a0:	b004      	add	sp, #16
 80007a2:	4770      	bx	lr

080007a4 <__udivmoddi4>:
 80007a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007a8:	468c      	mov	ip, r1
 80007aa:	4604      	mov	r4, r0
 80007ac:	9e08      	ldr	r6, [sp, #32]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d14b      	bne.n	800084a <__udivmoddi4+0xa6>
 80007b2:	428a      	cmp	r2, r1
 80007b4:	4615      	mov	r5, r2
 80007b6:	d967      	bls.n	8000888 <__udivmoddi4+0xe4>
 80007b8:	fab2 f282 	clz	r2, r2
 80007bc:	b14a      	cbz	r2, 80007d2 <__udivmoddi4+0x2e>
 80007be:	f1c2 0720 	rsb	r7, r2, #32
 80007c2:	fa01 f302 	lsl.w	r3, r1, r2
 80007c6:	fa20 f707 	lsr.w	r7, r0, r7
 80007ca:	4095      	lsls	r5, r2
 80007cc:	ea47 0c03 	orr.w	ip, r7, r3
 80007d0:	4094      	lsls	r4, r2
 80007d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80007d6:	fbbc f7fe 	udiv	r7, ip, lr
 80007da:	fa1f f885 	uxth.w	r8, r5
 80007de:	fb0e c317 	mls	r3, lr, r7, ip
 80007e2:	fb07 f908 	mul.w	r9, r7, r8
 80007e6:	0c21      	lsrs	r1, r4, #16
 80007e8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ec:	4599      	cmp	r9, r3
 80007ee:	d909      	bls.n	8000804 <__udivmoddi4+0x60>
 80007f0:	18eb      	adds	r3, r5, r3
 80007f2:	f107 31ff 	add.w	r1, r7, #4294967295
 80007f6:	f080 811c 	bcs.w	8000a32 <__udivmoddi4+0x28e>
 80007fa:	4599      	cmp	r9, r3
 80007fc:	f240 8119 	bls.w	8000a32 <__udivmoddi4+0x28e>
 8000800:	3f02      	subs	r7, #2
 8000802:	442b      	add	r3, r5
 8000804:	eba3 0309 	sub.w	r3, r3, r9
 8000808:	fbb3 f0fe 	udiv	r0, r3, lr
 800080c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000810:	fb00 f108 	mul.w	r1, r0, r8
 8000814:	b2a4      	uxth	r4, r4
 8000816:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081a:	42a1      	cmp	r1, r4
 800081c:	d909      	bls.n	8000832 <__udivmoddi4+0x8e>
 800081e:	192c      	adds	r4, r5, r4
 8000820:	f100 33ff 	add.w	r3, r0, #4294967295
 8000824:	f080 8107 	bcs.w	8000a36 <__udivmoddi4+0x292>
 8000828:	42a1      	cmp	r1, r4
 800082a:	f240 8104 	bls.w	8000a36 <__udivmoddi4+0x292>
 800082e:	3802      	subs	r0, #2
 8000830:	442c      	add	r4, r5
 8000832:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000836:	2700      	movs	r7, #0
 8000838:	1a64      	subs	r4, r4, r1
 800083a:	b11e      	cbz	r6, 8000844 <__udivmoddi4+0xa0>
 800083c:	2300      	movs	r3, #0
 800083e:	40d4      	lsrs	r4, r2
 8000840:	e9c6 4300 	strd	r4, r3, [r6]
 8000844:	4639      	mov	r1, r7
 8000846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084a:	428b      	cmp	r3, r1
 800084c:	d909      	bls.n	8000862 <__udivmoddi4+0xbe>
 800084e:	2e00      	cmp	r6, #0
 8000850:	f000 80ec 	beq.w	8000a2c <__udivmoddi4+0x288>
 8000854:	2700      	movs	r7, #0
 8000856:	e9c6 0100 	strd	r0, r1, [r6]
 800085a:	4638      	mov	r0, r7
 800085c:	4639      	mov	r1, r7
 800085e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000862:	fab3 f783 	clz	r7, r3
 8000866:	2f00      	cmp	r7, #0
 8000868:	d148      	bne.n	80008fc <__udivmoddi4+0x158>
 800086a:	428b      	cmp	r3, r1
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xd0>
 800086e:	4282      	cmp	r2, r0
 8000870:	f200 80fb 	bhi.w	8000a6a <__udivmoddi4+0x2c6>
 8000874:	1a84      	subs	r4, r0, r2
 8000876:	eb61 0303 	sbc.w	r3, r1, r3
 800087a:	2001      	movs	r0, #1
 800087c:	469c      	mov	ip, r3
 800087e:	2e00      	cmp	r6, #0
 8000880:	d0e0      	beq.n	8000844 <__udivmoddi4+0xa0>
 8000882:	e9c6 4c00 	strd	r4, ip, [r6]
 8000886:	e7dd      	b.n	8000844 <__udivmoddi4+0xa0>
 8000888:	b902      	cbnz	r2, 800088c <__udivmoddi4+0xe8>
 800088a:	deff      	udf	#255	; 0xff
 800088c:	fab2 f282 	clz	r2, r2
 8000890:	2a00      	cmp	r2, #0
 8000892:	f040 808f 	bne.w	80009b4 <__udivmoddi4+0x210>
 8000896:	2701      	movs	r7, #1
 8000898:	1b49      	subs	r1, r1, r5
 800089a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800089e:	fa1f f985 	uxth.w	r9, r5
 80008a2:	fbb1 fef8 	udiv	lr, r1, r8
 80008a6:	fb08 111e 	mls	r1, r8, lr, r1
 80008aa:	fb09 f00e 	mul.w	r0, r9, lr
 80008ae:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80008b2:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80008b6:	4298      	cmp	r0, r3
 80008b8:	d907      	bls.n	80008ca <__udivmoddi4+0x126>
 80008ba:	18eb      	adds	r3, r5, r3
 80008bc:	f10e 31ff 	add.w	r1, lr, #4294967295
 80008c0:	d202      	bcs.n	80008c8 <__udivmoddi4+0x124>
 80008c2:	4298      	cmp	r0, r3
 80008c4:	f200 80cd 	bhi.w	8000a62 <__udivmoddi4+0x2be>
 80008c8:	468e      	mov	lr, r1
 80008ca:	1a1b      	subs	r3, r3, r0
 80008cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80008d0:	fb08 3310 	mls	r3, r8, r0, r3
 80008d4:	fb09 f900 	mul.w	r9, r9, r0
 80008d8:	b2a4      	uxth	r4, r4
 80008da:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008de:	45a1      	cmp	r9, r4
 80008e0:	d907      	bls.n	80008f2 <__udivmoddi4+0x14e>
 80008e2:	192c      	adds	r4, r5, r4
 80008e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008e8:	d202      	bcs.n	80008f0 <__udivmoddi4+0x14c>
 80008ea:	45a1      	cmp	r9, r4
 80008ec:	f200 80b6 	bhi.w	8000a5c <__udivmoddi4+0x2b8>
 80008f0:	4618      	mov	r0, r3
 80008f2:	eba4 0409 	sub.w	r4, r4, r9
 80008f6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80008fa:	e79e      	b.n	800083a <__udivmoddi4+0x96>
 80008fc:	f1c7 0520 	rsb	r5, r7, #32
 8000900:	40bb      	lsls	r3, r7
 8000902:	fa22 fc05 	lsr.w	ip, r2, r5
 8000906:	ea4c 0c03 	orr.w	ip, ip, r3
 800090a:	fa21 f405 	lsr.w	r4, r1, r5
 800090e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000912:	fbb4 f9fe 	udiv	r9, r4, lr
 8000916:	fa1f f88c 	uxth.w	r8, ip
 800091a:	fb0e 4419 	mls	r4, lr, r9, r4
 800091e:	fa20 f305 	lsr.w	r3, r0, r5
 8000922:	40b9      	lsls	r1, r7
 8000924:	fb09 fa08 	mul.w	sl, r9, r8
 8000928:	4319      	orrs	r1, r3
 800092a:	0c0b      	lsrs	r3, r1, #16
 800092c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000930:	45a2      	cmp	sl, r4
 8000932:	fa02 f207 	lsl.w	r2, r2, r7
 8000936:	fa00 f307 	lsl.w	r3, r0, r7
 800093a:	d90b      	bls.n	8000954 <__udivmoddi4+0x1b0>
 800093c:	eb1c 0404 	adds.w	r4, ip, r4
 8000940:	f109 30ff 	add.w	r0, r9, #4294967295
 8000944:	f080 8088 	bcs.w	8000a58 <__udivmoddi4+0x2b4>
 8000948:	45a2      	cmp	sl, r4
 800094a:	f240 8085 	bls.w	8000a58 <__udivmoddi4+0x2b4>
 800094e:	f1a9 0902 	sub.w	r9, r9, #2
 8000952:	4464      	add	r4, ip
 8000954:	eba4 040a 	sub.w	r4, r4, sl
 8000958:	fbb4 f0fe 	udiv	r0, r4, lr
 800095c:	fb0e 4410 	mls	r4, lr, r0, r4
 8000960:	fb00 fa08 	mul.w	sl, r0, r8
 8000964:	b289      	uxth	r1, r1
 8000966:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800096a:	45a2      	cmp	sl, r4
 800096c:	d908      	bls.n	8000980 <__udivmoddi4+0x1dc>
 800096e:	eb1c 0404 	adds.w	r4, ip, r4
 8000972:	f100 31ff 	add.w	r1, r0, #4294967295
 8000976:	d26b      	bcs.n	8000a50 <__udivmoddi4+0x2ac>
 8000978:	45a2      	cmp	sl, r4
 800097a:	d969      	bls.n	8000a50 <__udivmoddi4+0x2ac>
 800097c:	3802      	subs	r0, #2
 800097e:	4464      	add	r4, ip
 8000980:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000984:	fba0 8902 	umull	r8, r9, r0, r2
 8000988:	eba4 040a 	sub.w	r4, r4, sl
 800098c:	454c      	cmp	r4, r9
 800098e:	4641      	mov	r1, r8
 8000990:	46ce      	mov	lr, r9
 8000992:	d354      	bcc.n	8000a3e <__udivmoddi4+0x29a>
 8000994:	d051      	beq.n	8000a3a <__udivmoddi4+0x296>
 8000996:	2e00      	cmp	r6, #0
 8000998:	d069      	beq.n	8000a6e <__udivmoddi4+0x2ca>
 800099a:	1a5a      	subs	r2, r3, r1
 800099c:	eb64 040e 	sbc.w	r4, r4, lr
 80009a0:	fa04 f505 	lsl.w	r5, r4, r5
 80009a4:	fa22 f307 	lsr.w	r3, r2, r7
 80009a8:	40fc      	lsrs	r4, r7
 80009aa:	431d      	orrs	r5, r3
 80009ac:	e9c6 5400 	strd	r5, r4, [r6]
 80009b0:	2700      	movs	r7, #0
 80009b2:	e747      	b.n	8000844 <__udivmoddi4+0xa0>
 80009b4:	4095      	lsls	r5, r2
 80009b6:	f1c2 0320 	rsb	r3, r2, #32
 80009ba:	fa21 f003 	lsr.w	r0, r1, r3
 80009be:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80009c2:	fbb0 f7f8 	udiv	r7, r0, r8
 80009c6:	fa1f f985 	uxth.w	r9, r5
 80009ca:	fb08 0017 	mls	r0, r8, r7, r0
 80009ce:	fa24 f303 	lsr.w	r3, r4, r3
 80009d2:	4091      	lsls	r1, r2
 80009d4:	fb07 fc09 	mul.w	ip, r7, r9
 80009d8:	430b      	orrs	r3, r1
 80009da:	0c19      	lsrs	r1, r3, #16
 80009dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009e0:	458c      	cmp	ip, r1
 80009e2:	fa04 f402 	lsl.w	r4, r4, r2
 80009e6:	d907      	bls.n	80009f8 <__udivmoddi4+0x254>
 80009e8:	1869      	adds	r1, r5, r1
 80009ea:	f107 30ff 	add.w	r0, r7, #4294967295
 80009ee:	d231      	bcs.n	8000a54 <__udivmoddi4+0x2b0>
 80009f0:	458c      	cmp	ip, r1
 80009f2:	d92f      	bls.n	8000a54 <__udivmoddi4+0x2b0>
 80009f4:	3f02      	subs	r7, #2
 80009f6:	4429      	add	r1, r5
 80009f8:	eba1 010c 	sub.w	r1, r1, ip
 80009fc:	fbb1 f0f8 	udiv	r0, r1, r8
 8000a00:	fb08 1c10 	mls	ip, r8, r0, r1
 8000a04:	fb00 fe09 	mul.w	lr, r0, r9
 8000a08:	b299      	uxth	r1, r3
 8000a0a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a0e:	458e      	cmp	lr, r1
 8000a10:	d907      	bls.n	8000a22 <__udivmoddi4+0x27e>
 8000a12:	1869      	adds	r1, r5, r1
 8000a14:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a18:	d218      	bcs.n	8000a4c <__udivmoddi4+0x2a8>
 8000a1a:	458e      	cmp	lr, r1
 8000a1c:	d916      	bls.n	8000a4c <__udivmoddi4+0x2a8>
 8000a1e:	3802      	subs	r0, #2
 8000a20:	4429      	add	r1, r5
 8000a22:	eba1 010e 	sub.w	r1, r1, lr
 8000a26:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000a2a:	e73a      	b.n	80008a2 <__udivmoddi4+0xfe>
 8000a2c:	4637      	mov	r7, r6
 8000a2e:	4630      	mov	r0, r6
 8000a30:	e708      	b.n	8000844 <__udivmoddi4+0xa0>
 8000a32:	460f      	mov	r7, r1
 8000a34:	e6e6      	b.n	8000804 <__udivmoddi4+0x60>
 8000a36:	4618      	mov	r0, r3
 8000a38:	e6fb      	b.n	8000832 <__udivmoddi4+0x8e>
 8000a3a:	4543      	cmp	r3, r8
 8000a3c:	d2ab      	bcs.n	8000996 <__udivmoddi4+0x1f2>
 8000a3e:	ebb8 0102 	subs.w	r1, r8, r2
 8000a42:	eb69 020c 	sbc.w	r2, r9, ip
 8000a46:	3801      	subs	r0, #1
 8000a48:	4696      	mov	lr, r2
 8000a4a:	e7a4      	b.n	8000996 <__udivmoddi4+0x1f2>
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	e7e8      	b.n	8000a22 <__udivmoddi4+0x27e>
 8000a50:	4608      	mov	r0, r1
 8000a52:	e795      	b.n	8000980 <__udivmoddi4+0x1dc>
 8000a54:	4607      	mov	r7, r0
 8000a56:	e7cf      	b.n	80009f8 <__udivmoddi4+0x254>
 8000a58:	4681      	mov	r9, r0
 8000a5a:	e77b      	b.n	8000954 <__udivmoddi4+0x1b0>
 8000a5c:	3802      	subs	r0, #2
 8000a5e:	442c      	add	r4, r5
 8000a60:	e747      	b.n	80008f2 <__udivmoddi4+0x14e>
 8000a62:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a66:	442b      	add	r3, r5
 8000a68:	e72f      	b.n	80008ca <__udivmoddi4+0x126>
 8000a6a:	4638      	mov	r0, r7
 8000a6c:	e707      	b.n	800087e <__udivmoddi4+0xda>
 8000a6e:	4637      	mov	r7, r6
 8000a70:	e6e8      	b.n	8000844 <__udivmoddi4+0xa0>
 8000a72:	bf00      	nop

08000a74 <__aeabi_idiv0>:
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	; 0x28
 8000a7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8e:	4b2a      	ldr	r3, [pc, #168]	; (8000b38 <MX_GPIO_Init+0xc0>)
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	4a29      	ldr	r2, [pc, #164]	; (8000b38 <MX_GPIO_Init+0xc0>)
 8000a94:	f043 0304 	orr.w	r3, r3, #4
 8000a98:	61d3      	str	r3, [r2, #28]
 8000a9a:	4b27      	ldr	r3, [pc, #156]	; (8000b38 <MX_GPIO_Init+0xc0>)
 8000a9c:	69db      	ldr	r3, [r3, #28]
 8000a9e:	f003 0304 	and.w	r3, r3, #4
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa6:	4b24      	ldr	r3, [pc, #144]	; (8000b38 <MX_GPIO_Init+0xc0>)
 8000aa8:	69db      	ldr	r3, [r3, #28]
 8000aaa:	4a23      	ldr	r2, [pc, #140]	; (8000b38 <MX_GPIO_Init+0xc0>)
 8000aac:	f043 0320 	orr.w	r3, r3, #32
 8000ab0:	61d3      	str	r3, [r2, #28]
 8000ab2:	4b21      	ldr	r3, [pc, #132]	; (8000b38 <MX_GPIO_Init+0xc0>)
 8000ab4:	69db      	ldr	r3, [r3, #28]
 8000ab6:	f003 0320 	and.w	r3, r3, #32
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <MX_GPIO_Init+0xc0>)
 8000ac0:	69db      	ldr	r3, [r3, #28]
 8000ac2:	4a1d      	ldr	r2, [pc, #116]	; (8000b38 <MX_GPIO_Init+0xc0>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	61d3      	str	r3, [r2, #28]
 8000aca:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <MX_GPIO_Init+0xc0>)
 8000acc:	69db      	ldr	r3, [r3, #28]
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <MX_GPIO_Init+0xc0>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	4a17      	ldr	r2, [pc, #92]	; (8000b38 <MX_GPIO_Init+0xc0>)
 8000adc:	f043 0302 	orr.w	r3, r3, #2
 8000ae0:	61d3      	str	r3, [r2, #28]
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <MX_GPIO_Init+0xc0>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	f003 0302 	and.w	r3, r3, #2
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2120      	movs	r1, #32
 8000af2:	4812      	ldr	r0, [pc, #72]	; (8000b3c <MX_GPIO_Init+0xc4>)
 8000af4:	f000 ffee 	bl	8001ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000af8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <MX_GPIO_Init+0xc8>)
 8000b00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	480d      	ldr	r0, [pc, #52]	; (8000b44 <MX_GPIO_Init+0xcc>)
 8000b0e:	f000 fe53 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b12:	2320      	movs	r3, #32
 8000b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	4804      	ldr	r0, [pc, #16]	; (8000b3c <MX_GPIO_Init+0xc4>)
 8000b2a:	f000 fe45 	bl	80017b8 <HAL_GPIO_Init>

}
 8000b2e:	bf00      	nop
 8000b30:	3728      	adds	r7, #40	; 0x28
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020000 	.word	0x40020000
 8000b40:	10110000 	.word	0x10110000
 8000b44:	40020800 	.word	0x40020800

08000b48 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <MX_I2C1_Init+0x50>)
 8000b4e:	4a13      	ldr	r2, [pc, #76]	; (8000b9c <MX_I2C1_Init+0x54>)
 8000b50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MX_I2C1_Init+0x50>)
 8000b54:	4a12      	ldr	r2, [pc, #72]	; (8000ba0 <MX_I2C1_Init+0x58>)
 8000b56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <MX_I2C1_Init+0x50>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_I2C1_Init+0x50>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_I2C1_Init+0x50>)
 8000b66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b6c:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <MX_I2C1_Init+0x50>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_I2C1_Init+0x50>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b78:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <MX_I2C1_Init+0x50>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_I2C1_Init+0x50>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b84:	4804      	ldr	r0, [pc, #16]	; (8000b98 <MX_I2C1_Init+0x50>)
 8000b86:	f000 ffd7 	bl	8001b38 <HAL_I2C_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b90:	f000 fb7e 	bl	8001290 <Error_Handler>
  }

}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	2000009c 	.word	0x2000009c
 8000b9c:	40005400 	.word	0x40005400
 8000ba0:	000186a0 	.word	0x000186a0

08000ba4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a17      	ldr	r2, [pc, #92]	; (8000c20 <HAL_I2C_MspInit+0x7c>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d128      	bne.n	8000c18 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <HAL_I2C_MspInit+0x80>)
 8000bc8:	69db      	ldr	r3, [r3, #28]
 8000bca:	4a16      	ldr	r2, [pc, #88]	; (8000c24 <HAL_I2C_MspInit+0x80>)
 8000bcc:	f043 0302 	orr.w	r3, r3, #2
 8000bd0:	61d3      	str	r3, [r2, #28]
 8000bd2:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <HAL_I2C_MspInit+0x80>)
 8000bd4:	69db      	ldr	r3, [r3, #28]
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be4:	2312      	movs	r3, #18
 8000be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000be8:	2301      	movs	r3, #1
 8000bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bec:	2303      	movs	r3, #3
 8000bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480b      	ldr	r0, [pc, #44]	; (8000c28 <HAL_I2C_MspInit+0x84>)
 8000bfc:	f000 fddc 	bl	80017b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <HAL_I2C_MspInit+0x80>)
 8000c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c04:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <HAL_I2C_MspInit+0x80>)
 8000c06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c0a:	6253      	str	r3, [r2, #36]	; 0x24
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <HAL_I2C_MspInit+0x80>)
 8000c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c18:	bf00      	nop
 8000c1a:	3728      	adds	r7, #40	; 0x28
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40005400 	.word	0x40005400
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020400 	.word	0x40020400

08000c2c <lcd_init>:
#include "i2c.h"



void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	; 0x28
 8000c30:	af02      	add	r7, sp, #8
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	f043 030c 	orr.w	r3, r3, #12
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 8000c48:	2380      	movs	r3, #128	; 0x80
 8000c4a:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	f043 0320 	orr.w	r3, r3, #32
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 8000c58:	f107 0118 	add.w	r1, r7, #24
 8000c5c:	230a      	movs	r3, #10
 8000c5e:	2202      	movs	r2, #2
 8000c60:	486c      	ldr	r0, [pc, #432]	; (8000e14 <lcd_init+0x1e8>)
 8000c62:	f002 fe2c 	bl	80038be <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8000c66:	f640 230d 	movw	r3, #2573	; 0xa0d
 8000c6a:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 8000c6c:	f107 0114 	add.w	r1, r7, #20
 8000c70:	230a      	movs	r3, #10
 8000c72:	2202      	movs	r2, #2
 8000c74:	4867      	ldr	r0, [pc, #412]	; (8000e14 <lcd_init+0x1e8>)
 8000c76:	f002 fe22 	bl	80038be <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 8000c7a:	2364      	movs	r3, #100	; 0x64
 8000c7c:	2205      	movs	r2, #5
 8000c7e:	217c      	movs	r1, #124	; 0x7c
 8000c80:	69f8      	ldr	r0, [r7, #28]
 8000c82:	f001 fbb5 	bl	80023f0 <HAL_I2C_IsDeviceReady>
 8000c86:	4603      	mov	r3, r0
 8000c88:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 8000c8a:	f107 0113 	add.w	r1, r7, #19
 8000c8e:	230a      	movs	r3, #10
 8000c90:	2201      	movs	r2, #1
 8000c92:	4860      	ldr	r0, [pc, #384]	; (8000e14 <lcd_init+0x1e8>)
 8000c94:	f002 fe13 	bl	80038be <HAL_UART_Transmit>
	HAL_Delay(50);
 8000c98:	2032      	movs	r0, #50	; 0x32
 8000c9a:	f000 fc87 	bl	80015ac <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 8000c9e:	f107 0218 	add.w	r2, r7, #24
 8000ca2:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	2302      	movs	r3, #2
 8000caa:	217c      	movs	r1, #124	; 0x7c
 8000cac:	69f8      	ldr	r0, [r7, #28]
 8000cae:	f001 f87b 	bl	8001da8 <HAL_I2C_Master_Transmit>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 8000cb6:	f107 0112 	add.w	r1, r7, #18
 8000cba:	230a      	movs	r3, #10
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	4855      	ldr	r0, [pc, #340]	; (8000e14 <lcd_init+0x1e8>)
 8000cc0:	f002 fdfd 	bl	80038be <HAL_UART_Transmit>
	HAL_Delay(50);
 8000cc4:	2032      	movs	r0, #50	; 0x32
 8000cc6:	f000 fc71 	bl	80015ac <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8000cca:	f107 0218 	add.w	r2, r7, #24
 8000cce:	f241 3388 	movw	r3, #5000	; 0x1388
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	217c      	movs	r1, #124	; 0x7c
 8000cd8:	69f8      	ldr	r0, [r7, #28]
 8000cda:	f001 f865 	bl	8001da8 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000cde:	2005      	movs	r0, #5
 8000ce0:	f000 fc64 	bl	80015ac <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8000ce4:	f107 0218 	add.w	r2, r7, #24
 8000ce8:	f241 3388 	movw	r3, #5000	; 0x1388
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	2302      	movs	r3, #2
 8000cf0:	217c      	movs	r1, #124	; 0x7c
 8000cf2:	69f8      	ldr	r0, [r7, #28]
 8000cf4:	f001 f858 	bl	8001da8 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	2204      	movs	r2, #4
 8000cfc:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	785b      	ldrb	r3, [r3, #1]
 8000d02:	f043 0308 	orr.w	r3, r3, #8
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 8000d0a:	f107 0218 	add.w	r2, r7, #24
 8000d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	2302      	movs	r3, #2
 8000d16:	217c      	movs	r1, #124	; 0x7c
 8000d18:	69f8      	ldr	r0, [r7, #28]
 8000d1a:	f001 f845 	bl	8001da8 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8000d22:	f107 0218 	add.w	r2, r7, #24
 8000d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	217c      	movs	r1, #124	; 0x7c
 8000d30:	69f8      	ldr	r0, [r7, #28]
 8000d32:	f001 f839 	bl	8001da8 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8000d36:	2002      	movs	r0, #2
 8000d38:	f000 fc38 	bl	80015ac <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	2202      	movs	r2, #2
 8000d40:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	789b      	ldrb	r3, [r3, #2]
 8000d46:	f043 0304 	orr.w	r3, r3, #4
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8000d4e:	f107 0218 	add.w	r2, r7, #24
 8000d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	2302      	movs	r3, #2
 8000d5a:	217c      	movs	r1, #124	; 0x7c
 8000d5c:	69f8      	ldr	r0, [r7, #28]
 8000d5e:	f001 f823 	bl	8001da8 <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 8000d62:	2300      	movs	r3, #0
 8000d64:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8000d6a:	f107 0210 	add.w	r2, r7, #16
 8000d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	2302      	movs	r3, #2
 8000d76:	21c4      	movs	r1, #196	; 0xc4
 8000d78:	69f8      	ldr	r0, [r7, #28]
 8000d7a:	f001 f815 	bl	8001da8 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 8000d7e:	2308      	movs	r3, #8
 8000d80:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 8000d82:	23ff      	movs	r3, #255	; 0xff
 8000d84:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8000d86:	f107 0210 	add.w	r2, r7, #16
 8000d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	2302      	movs	r3, #2
 8000d92:	21c4      	movs	r1, #196	; 0xc4
 8000d94:	69f8      	ldr	r0, [r7, #28]
 8000d96:	f001 f807 	bl	8001da8 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 8000d9e:	2320      	movs	r3, #32
 8000da0:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8000da2:	f107 0210 	add.w	r2, r7, #16
 8000da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000daa:	9300      	str	r3, [sp, #0]
 8000dac:	2302      	movs	r3, #2
 8000dae:	21c4      	movs	r1, #196	; 0xc4
 8000db0:	69f8      	ldr	r0, [r7, #28]
 8000db2:	f000 fff9 	bl	8001da8 <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 8000db6:	2304      	movs	r3, #4
 8000db8:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8000dba:	23ff      	movs	r3, #255	; 0xff
 8000dbc:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8000dbe:	f107 020c 	add.w	r2, r7, #12
 8000dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	2302      	movs	r3, #2
 8000dca:	21c4      	movs	r1, #196	; 0xc4
 8000dcc:	69f8      	ldr	r0, [r7, #28]
 8000dce:	f000 ffeb 	bl	8001da8 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8000dd6:	23ff      	movs	r3, #255	; 0xff
 8000dd8:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8000dda:	f107 020c 	add.w	r2, r7, #12
 8000dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	2302      	movs	r3, #2
 8000de6:	21c4      	movs	r1, #196	; 0xc4
 8000de8:	69f8      	ldr	r0, [r7, #28]
 8000dea:	f000 ffdd 	bl	8001da8 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 8000dee:	2302      	movs	r3, #2
 8000df0:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8000df2:	23ff      	movs	r3, #255	; 0xff
 8000df4:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8000df6:	f107 020c 	add.w	r2, r7, #12
 8000dfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	2302      	movs	r3, #2
 8000e02:	21c4      	movs	r1, #196	; 0xc4
 8000e04:	69f8      	ldr	r0, [r7, #28]
 8000e06:	f000 ffcf 	bl	8001da8 <HAL_I2C_Master_Transmit>


}
 8000e0a:	bf00      	nop
 8000e0c:	3720      	adds	r7, #32
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200000f0 	.word	0x200000f0

08000e18 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af02      	add	r7, sp, #8
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 8000e26:	2340      	movs	r3, #64	; 0x40
 8000e28:	733b      	strb	r3, [r7, #12]
    int i=0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8000e2e:	e011      	b.n	8000e54 <lcd_print+0x3c>
    {
            data[1] = str[i];
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	683a      	ldr	r2, [r7, #0]
 8000e34:	4413      	add	r3, r2
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8000e3a:	f107 020c 	add.w	r2, r7, #12
 8000e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	2302      	movs	r3, #2
 8000e46:	217c      	movs	r1, #124	; 0x7c
 8000e48:	6938      	ldr	r0, [r7, #16]
 8000e4a:	f000 ffad 	bl	8001da8 <HAL_I2C_Master_Transmit>
            i++;
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	3301      	adds	r3, #1
 8000e52:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	683a      	ldr	r2, [r7, #0]
 8000e58:	4413      	add	r3, r2
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d1e7      	bne.n	8000e30 <lcd_print+0x18>
   }
}
 8000e60:	bf00      	nop
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af02      	add	r7, sp, #8
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	70fb      	strb	r3, [r7, #3]
 8000e74:	4613      	mov	r3, r2
 8000e76:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 8000e7c:	78bb      	ldrb	r3, [r7, #2]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d104      	bne.n	8000e8c <lcd_position+0x24>
    {
        col = col | 0x80;
 8000e82:	78fb      	ldrb	r3, [r7, #3]
 8000e84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e88:	70fb      	strb	r3, [r7, #3]
 8000e8a:	e003      	b.n	8000e94 <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 8000e8c:	78fb      	ldrb	r3, [r7, #3]
 8000e8e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000e92:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 8000e94:	2380      	movs	r3, #128	; 0x80
 8000e96:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 8000e98:	78fb      	ldrb	r3, [r7, #3]
 8000e9a:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8000e9c:	f107 0208 	add.w	r2, r7, #8
 8000ea0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea4:	9300      	str	r3, [sp, #0]
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	217c      	movs	r1, #124	; 0x7c
 8000eaa:	68f8      	ldr	r0, [r7, #12]
 8000eac:	f000 ff7c 	bl	8001da8 <HAL_I2C_Master_Transmit>
}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <reglagecouleur>:

void reglagecouleur(uint8_t R,uint8_t G,uint8_t B)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af02      	add	r7, sp, #8
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	71bb      	strb	r3, [r7, #6]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	717b      	strb	r3, [r7, #5]
	I2C_HandleTypeDef* Handle = &hi2c1;
 8000eca:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <reglagecouleur+0x74>)
 8000ecc:	617b      	str	r3, [r7, #20]
	uint8_t data_r[2];
	uint8_t data_g[2];
	uint8_t data_b[2];
	data_r[0] = REG_RED;
 8000ece:	2304      	movs	r3, #4
 8000ed0:	743b      	strb	r3, [r7, #16]
	data_r[1] = R;
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_r,2,1000);
 8000ed6:	f107 0210 	add.w	r2, r7, #16
 8000eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	21c4      	movs	r1, #196	; 0xc4
 8000ee4:	6978      	ldr	r0, [r7, #20]
 8000ee6:	f000 ff5f 	bl	8001da8 <HAL_I2C_Master_Transmit>

	data_g[0] = REG_GREEN;
 8000eea:	2303      	movs	r3, #3
 8000eec:	733b      	strb	r3, [r7, #12]
	data_g[1] = G;
 8000eee:	79bb      	ldrb	r3, [r7, #6]
 8000ef0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_g,2,1000);
 8000ef2:	f107 020c 	add.w	r2, r7, #12
 8000ef6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	2302      	movs	r3, #2
 8000efe:	21c4      	movs	r1, #196	; 0xc4
 8000f00:	6978      	ldr	r0, [r7, #20]
 8000f02:	f000 ff51 	bl	8001da8 <HAL_I2C_Master_Transmit>

	data_b[0] = REG_BLUE;
 8000f06:	2302      	movs	r3, #2
 8000f08:	723b      	strb	r3, [r7, #8]
	data_b[1] = B;
 8000f0a:	797b      	ldrb	r3, [r7, #5]
 8000f0c:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_b,2,1000);
 8000f0e:	f107 0208 	add.w	r2, r7, #8
 8000f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	2302      	movs	r3, #2
 8000f1a:	21c4      	movs	r1, #196	; 0xc4
 8000f1c:	6978      	ldr	r0, [r7, #20]
 8000f1e:	f000 ff43 	bl	8001da8 <HAL_I2C_Master_Transmit>
}
 8000f22:	bf00      	nop
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	2000009c 	.word	0x2000009c

08000f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f32:	b08f      	sub	sp, #60	; 0x3c
 8000f34:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	HAL_StatusTypeDef status;
	uint8_t buf[32];
	uint16_t rawT;
	uint16_t rawH;
	float temp_c=0.0,hum=0.0;
 8000f36:	f04f 0300 	mov.w	r3, #0
 8000f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f3c:	f04f 0300 	mov.w	r3, #0
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f42:	f000 fac5 	bl	80014d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f46:	f000 f955 	bl	80011f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4a:	f7ff fd95 	bl	8000a78 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f4e:	f7ff fdfb 	bl	8000b48 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000f52:	f000 fa4f 	bl	80013f4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init(&hi2c1, &lcdData); // initialise le lcd
 8000f56:	4998      	ldr	r1, [pc, #608]	; (80011b8 <main+0x288>)
 8000f58:	4898      	ldr	r0, [pc, #608]	; (80011bc <main+0x28c>)
 8000f5a:	f7ff fe67 	bl	8000c2c <lcd_init>
  lcd_position(&hi2c1,0,0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2100      	movs	r1, #0
 8000f62:	4896      	ldr	r0, [pc, #600]	; (80011bc <main+0x28c>)
 8000f64:	f7ff ff80 	bl	8000e68 <lcd_position>
  lcd_print(&hi2c1,"Temp & Humidity");
 8000f68:	4995      	ldr	r1, [pc, #596]	; (80011c0 <main+0x290>)
 8000f6a:	4894      	ldr	r0, [pc, #592]	; (80011bc <main+0x28c>)
 8000f6c:	f7ff ff54 	bl	8000e18 <lcd_print>
  reglagecouleur(0,0,255);
 8000f70:	22ff      	movs	r2, #255	; 0xff
 8000f72:	2100      	movs	r1, #0
 8000f74:	2000      	movs	r0, #0
 8000f76:	f7ff ff9f 	bl	8000eb8 <reglagecouleur>
  HAL_Delay(5000);
 8000f7a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f7e:	f000 fb15 	bl	80015ac <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  buf[0]=0x20;
 8000f82:	2320      	movs	r3, #32
 8000f84:	703b      	strb	r3, [r7, #0]
	  buf[1]=0x24;
 8000f86:	2324      	movs	r3, #36	; 0x24
 8000f88:	707b      	strb	r3, [r7, #1]
	  status=HAL_I2C_Master_Transmit(&hi2c1, sensorAddress, buf, 2, HAL_MAX_DELAY);
 8000f8a:	2188      	movs	r1, #136	; 0x88
 8000f8c:	463a      	mov	r2, r7
 8000f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	2302      	movs	r3, #2
 8000f96:	4889      	ldr	r0, [pc, #548]	; (80011bc <main+0x28c>)
 8000f98:	f000 ff06 	bl	8001da8 <HAL_I2C_Master_Transmit>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  if(status!=HAL_OK){
 8000fa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d005      	beq.n	8000fb6 <main+0x86>
		  strcpy((char *)buf,"Err Tx \r\n");
 8000faa:	463b      	mov	r3, r7
 8000fac:	4a85      	ldr	r2, [pc, #532]	; (80011c4 <main+0x294>)
 8000fae:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fb0:	c303      	stmia	r3!, {r0, r1}
 8000fb2:	801a      	strh	r2, [r3, #0]
 8000fb4:	e0dc      	b.n	8001170 <main+0x240>
	  }else{
		  //HAL_I2C_Master_Transmit(&hi2c1, (sensorAddress|0x01), buf, 0, HAL_MAX_DELAY);
		  HAL_Delay(10);
 8000fb6:	200a      	movs	r0, #10
 8000fb8:	f000 faf8 	bl	80015ac <HAL_Delay>
		  buf[0]=0x0; //MSB temp
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	703b      	strb	r3, [r7, #0]
		  buf[1]=0x0; //LSB
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	707b      	strb	r3, [r7, #1]
		  buf[2]=0x0; //CRC
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	70bb      	strb	r3, [r7, #2]
		  buf[3]=0; //MSB hum
 8000fc8:	2300      	movs	r3, #0
 8000fca:	70fb      	strb	r3, [r7, #3]
		  buf[4]=0; //LSB
 8000fcc:	2300      	movs	r3, #0
 8000fce:	713b      	strb	r3, [r7, #4]
		  buf[5]=0; //CRC
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	717b      	strb	r3, [r7, #5]
		  buf[6]=0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	71bb      	strb	r3, [r7, #6]
		  buf[7]=0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	71fb      	strb	r3, [r7, #7]
		  buf[8]=0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	723b      	strb	r3, [r7, #8]
		  status=HAL_I2C_Master_Receive(&hi2c1, (sensorAddress|0x00), buf,6, HAL_MAX_DELAY);
 8000fe0:	2188      	movs	r1, #136	; 0x88
 8000fe2:	463a      	mov	r2, r7
 8000fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2306      	movs	r3, #6
 8000fec:	4873      	ldr	r0, [pc, #460]	; (80011bc <main+0x28c>)
 8000fee:	f000 ffd9 	bl	8001fa4 <HAL_I2C_Master_Receive>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		  if(status!=HAL_OK){
 8000ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d005      	beq.n	800100c <main+0xdc>
			  strcpy((char *)buf,"Err Rx \r\n");
 8001000:	463b      	mov	r3, r7
 8001002:	4a71      	ldr	r2, [pc, #452]	; (80011c8 <main+0x298>)
 8001004:	ca07      	ldmia	r2, {r0, r1, r2}
 8001006:	c303      	stmia	r3!, {r0, r1}
 8001008:	801a      	strh	r2, [r3, #0]
 800100a:	e0b1      	b.n	8001170 <main+0x240>
		  }else{
			  rawT=((int16_t)buf[0])<<8|((int16_t)buf[1]);
 800100c:	783b      	ldrb	r3, [r7, #0]
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	b21a      	sxth	r2, r3
 8001012:	787b      	ldrb	r3, [r7, #1]
 8001014:	b21b      	sxth	r3, r3
 8001016:	4313      	orrs	r3, r2
 8001018:	b21b      	sxth	r3, r3
 800101a:	84bb      	strh	r3, [r7, #36]	; 0x24
			  temp_c= -45+ 175*((float)rawT/65535);
 800101c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff f96a 	bl	80002f8 <__aeabi_ui2f>
 8001024:	4603      	mov	r3, r0
 8001026:	4969      	ldr	r1, [pc, #420]	; (80011cc <main+0x29c>)
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fa71 	bl	8000510 <__aeabi_fdiv>
 800102e:	4603      	mov	r3, r0
 8001030:	4967      	ldr	r1, [pc, #412]	; (80011d0 <main+0x2a0>)
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff f9b8 	bl	80003a8 <__aeabi_fmul>
 8001038:	4603      	mov	r3, r0
 800103a:	4966      	ldr	r1, [pc, #408]	; (80011d4 <main+0x2a4>)
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff f8a9 	bl	8000194 <__aeabi_fsub>
 8001042:	4603      	mov	r3, r0
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c

			  rawH=((int16_t)buf[3])<<8|((int16_t)buf[4]);
 8001046:	78fb      	ldrb	r3, [r7, #3]
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	b21a      	sxth	r2, r3
 800104c:	793b      	ldrb	r3, [r7, #4]
 800104e:	b21b      	sxth	r3, r3
 8001050:	4313      	orrs	r3, r2
 8001052:	b21b      	sxth	r3, r3
 8001054:	847b      	strh	r3, [r7, #34]	; 0x22
			  hum=100*((float)rawH/65535);
 8001056:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff f94d 	bl	80002f8 <__aeabi_ui2f>
 800105e:	4603      	mov	r3, r0
 8001060:	495a      	ldr	r1, [pc, #360]	; (80011cc <main+0x29c>)
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fa54 	bl	8000510 <__aeabi_fdiv>
 8001068:	4603      	mov	r3, r0
 800106a:	495b      	ldr	r1, [pc, #364]	; (80011d8 <main+0x2a8>)
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff f99b 	bl	80003a8 <__aeabi_fmul>
 8001072:	4603      	mov	r3, r0
 8001074:	62bb      	str	r3, [r7, #40]	; 0x28
			  hum*=10;
 8001076:	4959      	ldr	r1, [pc, #356]	; (80011dc <main+0x2ac>)
 8001078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800107a:	f7ff f995 	bl	80003a8 <__aeabi_fmul>
 800107e:	4603      	mov	r3, r0
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
			  temp_c*=10;
 8001082:	4956      	ldr	r1, [pc, #344]	; (80011dc <main+0x2ac>)
 8001084:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001086:	f7ff f98f 	bl	80003a8 <__aeabi_fmul>
 800108a:	4603      	mov	r3, r0
 800108c:	62fb      	str	r3, [r7, #44]	; 0x2c
			  if(temp_c<0){
 800108e:	f04f 0100 	mov.w	r1, #0
 8001092:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001094:	f7ff fb26 	bl	80006e4 <__aeabi_fcmplt>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d036      	beq.n	800110c <main+0x1dc>
				  temp_c=-temp_c;
 800109e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
				  sprintf((char *)buf,"T= -%u,%1u C H=%u,%1u \r\n",
						  (unsigned int)temp_c/10,
 80010a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010a8:	f7ff fb44 	bl	8000734 <__aeabi_f2uiz>
 80010ac:	4602      	mov	r2, r0
				  sprintf((char *)buf,"T= -%u,%1u C H=%u,%1u \r\n",
 80010ae:	4b4c      	ldr	r3, [pc, #304]	; (80011e0 <main+0x2b0>)
 80010b0:	fba3 2302 	umull	r2, r3, r3, r2
 80010b4:	08de      	lsrs	r6, r3, #3
						  (unsigned int)temp_c%10,(unsigned int)hum/10,
 80010b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010b8:	f7ff fb3c 	bl	8000734 <__aeabi_f2uiz>
 80010bc:	4602      	mov	r2, r0
				  sprintf((char *)buf,"T= -%u,%1u C H=%u,%1u \r\n",
 80010be:	4b48      	ldr	r3, [pc, #288]	; (80011e0 <main+0x2b0>)
 80010c0:	fba3 1302 	umull	r1, r3, r3, r2
 80010c4:	08dc      	lsrs	r4, r3, #3
 80010c6:	4623      	mov	r3, r4
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4423      	add	r3, r4
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	1ad4      	subs	r4, r2, r3
						  (unsigned int)temp_c%10,(unsigned int)hum/10,
 80010d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80010d2:	f7ff fb2f 	bl	8000734 <__aeabi_f2uiz>
 80010d6:	4602      	mov	r2, r0
				  sprintf((char *)buf,"T= -%u,%1u C H=%u,%1u \r\n",
 80010d8:	4b41      	ldr	r3, [pc, #260]	; (80011e0 <main+0x2b0>)
 80010da:	fba3 2302 	umull	r2, r3, r3, r2
 80010de:	08dd      	lsrs	r5, r3, #3
								  (unsigned int)hum%10);
 80010e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80010e2:	f7ff fb27 	bl	8000734 <__aeabi_f2uiz>
 80010e6:	4601      	mov	r1, r0
				  sprintf((char *)buf,"T= -%u,%1u C H=%u,%1u \r\n",
 80010e8:	4b3d      	ldr	r3, [pc, #244]	; (80011e0 <main+0x2b0>)
 80010ea:	fba3 2301 	umull	r2, r3, r3, r1
 80010ee:	08da      	lsrs	r2, r3, #3
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	1aca      	subs	r2, r1, r3
 80010fa:	4638      	mov	r0, r7
 80010fc:	9201      	str	r2, [sp, #4]
 80010fe:	9500      	str	r5, [sp, #0]
 8001100:	4623      	mov	r3, r4
 8001102:	4632      	mov	r2, r6
 8001104:	4937      	ldr	r1, [pc, #220]	; (80011e4 <main+0x2b4>)
 8001106:	f002 fdf9 	bl	8003cfc <siprintf>
 800110a:	e031      	b.n	8001170 <main+0x240>
			  }else{
				  sprintf((char *)buf,"T=%u,%1u C H=%u,%1u \r\n",
						  (unsigned int)temp_c/10,
 800110c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800110e:	f7ff fb11 	bl	8000734 <__aeabi_f2uiz>
 8001112:	4602      	mov	r2, r0
				  sprintf((char *)buf,"T=%u,%1u C H=%u,%1u \r\n",
 8001114:	4b32      	ldr	r3, [pc, #200]	; (80011e0 <main+0x2b0>)
 8001116:	fba3 2302 	umull	r2, r3, r3, r2
 800111a:	08de      	lsrs	r6, r3, #3
						  (unsigned int)temp_c%10,(unsigned int)hum/10,
 800111c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800111e:	f7ff fb09 	bl	8000734 <__aeabi_f2uiz>
 8001122:	4602      	mov	r2, r0
				  sprintf((char *)buf,"T=%u,%1u C H=%u,%1u \r\n",
 8001124:	4b2e      	ldr	r3, [pc, #184]	; (80011e0 <main+0x2b0>)
 8001126:	fba3 1302 	umull	r1, r3, r3, r2
 800112a:	08dc      	lsrs	r4, r3, #3
 800112c:	4623      	mov	r3, r4
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4423      	add	r3, r4
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	1ad4      	subs	r4, r2, r3
						  (unsigned int)temp_c%10,(unsigned int)hum/10,
 8001136:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001138:	f7ff fafc 	bl	8000734 <__aeabi_f2uiz>
 800113c:	4602      	mov	r2, r0
				  sprintf((char *)buf,"T=%u,%1u C H=%u,%1u \r\n",
 800113e:	4b28      	ldr	r3, [pc, #160]	; (80011e0 <main+0x2b0>)
 8001140:	fba3 2302 	umull	r2, r3, r3, r2
 8001144:	08dd      	lsrs	r5, r3, #3
								  (unsigned int)hum%10);
 8001146:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001148:	f7ff faf4 	bl	8000734 <__aeabi_f2uiz>
 800114c:	4601      	mov	r1, r0
				  sprintf((char *)buf,"T=%u,%1u C H=%u,%1u \r\n",
 800114e:	4b24      	ldr	r3, [pc, #144]	; (80011e0 <main+0x2b0>)
 8001150:	fba3 2301 	umull	r2, r3, r3, r1
 8001154:	08da      	lsrs	r2, r3, #3
 8001156:	4613      	mov	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	1aca      	subs	r2, r1, r3
 8001160:	4638      	mov	r0, r7
 8001162:	9201      	str	r2, [sp, #4]
 8001164:	9500      	str	r5, [sp, #0]
 8001166:	4623      	mov	r3, r4
 8001168:	4632      	mov	r2, r6
 800116a:	491f      	ldr	r1, [pc, #124]	; (80011e8 <main+0x2b8>)
 800116c:	f002 fdc6 	bl	8003cfc <siprintf>
			  }
		  }
	  }
	  serialPrint((char*)buf);
 8001170:	463b      	mov	r3, r7
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f890 	bl	8001298 <serialPrint>

	  lcd_position(&hi2c1,0,0);
 8001178:	2200      	movs	r2, #0
 800117a:	2100      	movs	r1, #0
 800117c:	480f      	ldr	r0, [pc, #60]	; (80011bc <main+0x28c>)
 800117e:	f7ff fe73 	bl	8000e68 <lcd_position>
	  lcd_print(&hi2c1,(char*)buf);
 8001182:	463b      	mov	r3, r7
 8001184:	4619      	mov	r1, r3
 8001186:	480d      	ldr	r0, [pc, #52]	; (80011bc <main+0x28c>)
 8001188:	f7ff fe46 	bl	8000e18 <lcd_print>
	  lcd_position(&hi2c1,0,1);
 800118c:	2201      	movs	r2, #1
 800118e:	2100      	movs	r1, #0
 8001190:	480a      	ldr	r0, [pc, #40]	; (80011bc <main+0x28c>)
 8001192:	f7ff fe69 	bl	8000e68 <lcd_position>
	  lcd_print(&hi2c1,"__BE_STM32_21__");
 8001196:	4915      	ldr	r1, [pc, #84]	; (80011ec <main+0x2bc>)
 8001198:	4808      	ldr	r0, [pc, #32]	; (80011bc <main+0x28c>)
 800119a:	f7ff fe3d 	bl	8000e18 <lcd_print>
	  reglagecouleur(3,0,0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	2003      	movs	r0, #3
 80011a4:	f7ff fe88 	bl	8000eb8 <reglagecouleur>

	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80011a8:	2120      	movs	r1, #32
 80011aa:	4811      	ldr	r0, [pc, #68]	; (80011f0 <main+0x2c0>)
 80011ac:	f000 fcaa 	bl	8001b04 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80011b0:	2064      	movs	r0, #100	; 0x64
 80011b2:	f000 f9fb 	bl	80015ac <HAL_Delay>
	  buf[0]=0x20;
 80011b6:	e6e4      	b.n	8000f82 <main+0x52>
 80011b8:	2000008c 	.word	0x2000008c
 80011bc:	2000009c 	.word	0x2000009c
 80011c0:	08004548 	.word	0x08004548
 80011c4:	08004558 	.word	0x08004558
 80011c8:	08004564 	.word	0x08004564
 80011cc:	477fff00 	.word	0x477fff00
 80011d0:	432f0000 	.word	0x432f0000
 80011d4:	42340000 	.word	0x42340000
 80011d8:	42c80000 	.word	0x42c80000
 80011dc:	41200000 	.word	0x41200000
 80011e0:	cccccccd 	.word	0xcccccccd
 80011e4:	08004570 	.word	0x08004570
 80011e8:	0800458c 	.word	0x0800458c
 80011ec:	080045a4 	.word	0x080045a4
 80011f0:	40020000 	.word	0x40020000

080011f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b092      	sub	sp, #72	; 0x48
 80011f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	2234      	movs	r2, #52	; 0x34
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f002 fd72 	bl	8003cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001208:	463b      	mov	r3, r7
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001216:	4b1d      	ldr	r3, [pc, #116]	; (800128c <SystemClock_Config+0x98>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800121e:	4a1b      	ldr	r2, [pc, #108]	; (800128c <SystemClock_Config+0x98>)
 8001220:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001224:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001226:	2302      	movs	r3, #2
 8001228:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800122a:	2301      	movs	r3, #1
 800122c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800122e:	2310      	movs	r3, #16
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001232:	2302      	movs	r3, #2
 8001234:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001236:	2300      	movs	r3, #0
 8001238:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800123a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800123e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001240:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001244:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	4618      	mov	r0, r3
 800124c:	f001 fd2a 	bl	8002ca4 <HAL_RCC_OscConfig>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001256:	f000 f81b 	bl	8001290 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125a:	230f      	movs	r3, #15
 800125c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800125e:	2303      	movs	r3, #3
 8001260:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800126e:	463b      	mov	r3, r7
 8001270:	2101      	movs	r1, #1
 8001272:	4618      	mov	r0, r3
 8001274:	f002 f846 	bl	8003304 <HAL_RCC_ClockConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800127e:	f000 f807 	bl	8001290 <Error_Handler>
  }
}
 8001282:	bf00      	nop
 8001284:	3748      	adds	r7, #72	; 0x48
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40007000 	.word	0x40007000

08001290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001294:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001296:	e7fe      	b.n	8001296 <Error_Handler+0x6>

08001298 <serialPrint>:

/*Affichage
 *  A ameliorer au fur et a mesure avec des affichage type arduino
 *  using sprintf()
 */
void serialPrint(char *message){
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]

	uint8_t buf[32];

	strcpy((char *)buf,message);
 80012a0:	f107 0308 	add.w	r3, r7, #8
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f002 fd48 	bl	8003d3c <strcpy>
	HAL_UART_Transmit(&huart2,buf,strlen((char*)buf),HAL_MAX_DELAY);
 80012ac:	f107 0308 	add.w	r3, r7, #8
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7fe ff63 	bl	800017c <strlen>
 80012b6:	4603      	mov	r3, r0
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	f107 0108 	add.w	r1, r7, #8
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	4803      	ldr	r0, [pc, #12]	; (80012d0 <serialPrint+0x38>)
 80012c4:	f002 fafb 	bl	80038be <HAL_UART_Transmit>
}
 80012c8:	bf00      	nop
 80012ca:	3728      	adds	r7, #40	; 0x28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	200000f0 	.word	0x200000f0

080012d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <HAL_MspInit+0x5c>)
 80012dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012de:	4a14      	ldr	r2, [pc, #80]	; (8001330 <HAL_MspInit+0x5c>)
 80012e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80012e4:	6253      	str	r3, [r2, #36]	; 0x24
 80012e6:	4b12      	ldr	r3, [pc, #72]	; (8001330 <HAL_MspInit+0x5c>)
 80012e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <HAL_MspInit+0x5c>)
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	4a0e      	ldr	r2, [pc, #56]	; (8001330 <HAL_MspInit+0x5c>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6213      	str	r3, [r2, #32]
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <HAL_MspInit+0x5c>)
 8001300:	6a1b      	ldr	r3, [r3, #32]
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <HAL_MspInit+0x5c>)
 800130c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130e:	4a08      	ldr	r2, [pc, #32]	; (8001330 <HAL_MspInit+0x5c>)
 8001310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001314:	6253      	str	r3, [r2, #36]	; 0x24
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_MspInit+0x5c>)
 8001318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001322:	2007      	movs	r0, #7
 8001324:	f000 fa14 	bl	8001750 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001328:	bf00      	nop
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40023800 	.word	0x40023800

08001334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <NMI_Handler+0x4>

0800133a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800133e:	e7fe      	b.n	800133e <HardFault_Handler+0x4>

08001340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <MemManage_Handler+0x4>

08001346 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <BusFault_Handler+0x4>

0800134c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <UsageFault_Handler+0x4>

08001352 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr

0800135e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr

0800136a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr

08001376 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800137a:	f000 f8fb 	bl	8001574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <_sbrk+0x50>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d102      	bne.n	800139a <_sbrk+0x16>
		heap_end = &end;
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <_sbrk+0x50>)
 8001396:	4a10      	ldr	r2, [pc, #64]	; (80013d8 <_sbrk+0x54>)
 8001398:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <_sbrk+0x50>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <_sbrk+0x50>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4413      	add	r3, r2
 80013a8:	466a      	mov	r2, sp
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d907      	bls.n	80013be <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80013ae:	f002 fc73 	bl	8003c98 <__errno>
 80013b2:	4602      	mov	r2, r0
 80013b4:	230c      	movs	r3, #12
 80013b6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80013b8:	f04f 33ff 	mov.w	r3, #4294967295
 80013bc:	e006      	b.n	80013cc <_sbrk+0x48>
	}

	heap_end += incr;
 80013be:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <_sbrk+0x50>)
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	4a03      	ldr	r2, [pc, #12]	; (80013d4 <_sbrk+0x50>)
 80013c8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80013ca:	68fb      	ldr	r3, [r7, #12]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000090 	.word	0x20000090
 80013d8:	20000138 	.word	0x20000138

080013dc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80013e0:	4b03      	ldr	r3, [pc, #12]	; (80013f0 <SystemInit+0x14>)
 80013e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013e6:	609a      	str	r2, [r3, #8]
#endif
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 80013fa:	4a12      	ldr	r2, [pc, #72]	; (8001444 <MX_USART2_UART_Init+0x50>)
 80013fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 8001400:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001404:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 800141a:	220c      	movs	r2, #12
 800141c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <MX_USART2_UART_Init+0x4c>)
 800142c:	f002 f9fa 	bl	8003824 <HAL_UART_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001436:	f7ff ff2b 	bl	8001290 <Error_Handler>
  }

}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200000f0 	.word	0x200000f0
 8001444:	40004400 	.word	0x40004400

08001448 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	; 0x28
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a17      	ldr	r2, [pc, #92]	; (80014c4 <HAL_UART_MspInit+0x7c>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d127      	bne.n	80014ba <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800146a:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <HAL_UART_MspInit+0x80>)
 800146c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146e:	4a16      	ldr	r2, [pc, #88]	; (80014c8 <HAL_UART_MspInit+0x80>)
 8001470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001474:	6253      	str	r3, [r2, #36]	; 0x24
 8001476:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <HAL_UART_MspInit+0x80>)
 8001478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <HAL_UART_MspInit+0x80>)
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	4a10      	ldr	r2, [pc, #64]	; (80014c8 <HAL_UART_MspInit+0x80>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	61d3      	str	r3, [r2, #28]
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <HAL_UART_MspInit+0x80>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800149a:	230c      	movs	r3, #12
 800149c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	2302      	movs	r3, #2
 80014a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a6:	2303      	movs	r3, #3
 80014a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014aa:	2307      	movs	r3, #7
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	; (80014cc <HAL_UART_MspInit+0x84>)
 80014b6:	f000 f97f 	bl	80017b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80014ba:	bf00      	nop
 80014bc:	3728      	adds	r7, #40	; 0x28
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40004400 	.word	0x40004400
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40020000 	.word	0x40020000

080014d0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014d6:	2300      	movs	r3, #0
 80014d8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014da:	2003      	movs	r0, #3
 80014dc:	f000 f938 	bl	8001750 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014e0:	2000      	movs	r0, #0
 80014e2:	f000 f80d 	bl	8001500 <HAL_InitTick>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d002      	beq.n	80014f2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	71fb      	strb	r3, [r7, #7]
 80014f0:	e001      	b.n	80014f6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014f2:	f7ff feef 	bl	80012d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014f6:	79fb      	ldrb	r3, [r7, #7]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001508:	2300      	movs	r3, #0
 800150a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800150c:	4b16      	ldr	r3, [pc, #88]	; (8001568 <HAL_InitTick+0x68>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d022      	beq.n	800155a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001514:	4b15      	ldr	r3, [pc, #84]	; (800156c <HAL_InitTick+0x6c>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b13      	ldr	r3, [pc, #76]	; (8001568 <HAL_InitTick+0x68>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001520:	fbb1 f3f3 	udiv	r3, r1, r3
 8001524:	fbb2 f3f3 	udiv	r3, r2, r3
 8001528:	4618      	mov	r0, r3
 800152a:	f000 f938 	bl	800179e <HAL_SYSTICK_Config>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d10f      	bne.n	8001554 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b0f      	cmp	r3, #15
 8001538:	d809      	bhi.n	800154e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800153a:	2200      	movs	r2, #0
 800153c:	6879      	ldr	r1, [r7, #4]
 800153e:	f04f 30ff 	mov.w	r0, #4294967295
 8001542:	f000 f910 	bl	8001766 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <HAL_InitTick+0x70>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	e007      	b.n	800155e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	73fb      	strb	r3, [r7, #15]
 8001552:	e004      	b.n	800155e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	73fb      	strb	r3, [r7, #15]
 8001558:	e001      	b.n	800155e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800155e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000008 	.word	0x20000008
 800156c:	20000000 	.word	0x20000000
 8001570:	20000004 	.word	0x20000004

08001574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <HAL_IncTick+0x1c>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <HAL_IncTick+0x20>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4413      	add	r3, r2
 8001582:	4a03      	ldr	r2, [pc, #12]	; (8001590 <HAL_IncTick+0x1c>)
 8001584:	6013      	str	r3, [r2, #0]
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	20000130 	.word	0x20000130
 8001594:	20000008 	.word	0x20000008

08001598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return uwTick;
 800159c:	4b02      	ldr	r3, [pc, #8]	; (80015a8 <HAL_GetTick+0x10>)
 800159e:	681b      	ldr	r3, [r3, #0]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr
 80015a8:	20000130 	.word	0x20000130

080015ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015b4:	f7ff fff0 	bl	8001598 <HAL_GetTick>
 80015b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c4:	d004      	beq.n	80015d0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_Delay+0x40>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	4413      	add	r3, r2
 80015ce:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015d0:	bf00      	nop
 80015d2:	f7ff ffe1 	bl	8001598 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d8f7      	bhi.n	80015d2 <HAL_Delay+0x26>
  {
  }
}
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000008 	.word	0x20000008

080015f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <__NVIC_SetPriorityGrouping+0x44>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800160c:	4013      	ands	r3, r2
 800160e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800161c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001622:	4a04      	ldr	r2, [pc, #16]	; (8001634 <__NVIC_SetPriorityGrouping+0x44>)
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	60d3      	str	r3, [r2, #12]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800163c:	4b04      	ldr	r3, [pc, #16]	; (8001650 <__NVIC_GetPriorityGrouping+0x18>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	0a1b      	lsrs	r3, r3, #8
 8001642:	f003 0307 	and.w	r3, r3, #7
}
 8001646:	4618      	mov	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	6039      	str	r1, [r7, #0]
 800165e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001664:	2b00      	cmp	r3, #0
 8001666:	db0a      	blt.n	800167e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	b2da      	uxtb	r2, r3
 800166c:	490c      	ldr	r1, [pc, #48]	; (80016a0 <__NVIC_SetPriority+0x4c>)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	0112      	lsls	r2, r2, #4
 8001674:	b2d2      	uxtb	r2, r2
 8001676:	440b      	add	r3, r1
 8001678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800167c:	e00a      	b.n	8001694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	b2da      	uxtb	r2, r3
 8001682:	4908      	ldr	r1, [pc, #32]	; (80016a4 <__NVIC_SetPriority+0x50>)
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	3b04      	subs	r3, #4
 800168c:	0112      	lsls	r2, r2, #4
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	440b      	add	r3, r1
 8001692:	761a      	strb	r2, [r3, #24]
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000e100 	.word	0xe000e100
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b089      	sub	sp, #36	; 0x24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f1c3 0307 	rsb	r3, r3, #7
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	bf28      	it	cs
 80016c6:	2304      	movcs	r3, #4
 80016c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	3304      	adds	r3, #4
 80016ce:	2b06      	cmp	r3, #6
 80016d0:	d902      	bls.n	80016d8 <NVIC_EncodePriority+0x30>
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3b03      	subs	r3, #3
 80016d6:	e000      	b.n	80016da <NVIC_EncodePriority+0x32>
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016dc:	f04f 32ff 	mov.w	r2, #4294967295
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43da      	mvns	r2, r3
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	401a      	ands	r2, r3
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f0:	f04f 31ff 	mov.w	r1, #4294967295
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	fa01 f303 	lsl.w	r3, r1, r3
 80016fa:	43d9      	mvns	r1, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	4313      	orrs	r3, r2
         );
}
 8001702:	4618      	mov	r0, r3
 8001704:	3724      	adds	r7, #36	; 0x24
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr

0800170c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3b01      	subs	r3, #1
 8001718:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800171c:	d301      	bcc.n	8001722 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800171e:	2301      	movs	r3, #1
 8001720:	e00f      	b.n	8001742 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001722:	4a0a      	ldr	r2, [pc, #40]	; (800174c <SysTick_Config+0x40>)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3b01      	subs	r3, #1
 8001728:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800172a:	210f      	movs	r1, #15
 800172c:	f04f 30ff 	mov.w	r0, #4294967295
 8001730:	f7ff ff90 	bl	8001654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <SysTick_Config+0x40>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800173a:	4b04      	ldr	r3, [pc, #16]	; (800174c <SysTick_Config+0x40>)
 800173c:	2207      	movs	r2, #7
 800173e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	e000e010 	.word	0xe000e010

08001750 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff ff49 	bl	80015f0 <__NVIC_SetPriorityGrouping>
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b086      	sub	sp, #24
 800176a:	af00      	add	r7, sp, #0
 800176c:	4603      	mov	r3, r0
 800176e:	60b9      	str	r1, [r7, #8]
 8001770:	607a      	str	r2, [r7, #4]
 8001772:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001778:	f7ff ff5e 	bl	8001638 <__NVIC_GetPriorityGrouping>
 800177c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	68b9      	ldr	r1, [r7, #8]
 8001782:	6978      	ldr	r0, [r7, #20]
 8001784:	f7ff ff90 	bl	80016a8 <NVIC_EncodePriority>
 8001788:	4602      	mov	r2, r0
 800178a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800178e:	4611      	mov	r1, r2
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ff5f 	bl	8001654 <__NVIC_SetPriority>
}
 8001796:	bf00      	nop
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff ffb0 	bl	800170c <SysTick_Config>
 80017ac:	4603      	mov	r3, r0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80017ce:	e160      	b.n	8001a92 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	2101      	movs	r1, #1
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	fa01 f303 	lsl.w	r3, r1, r3
 80017dc:	4013      	ands	r3, r2
 80017de:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 8152 	beq.w	8001a8c <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d00b      	beq.n	8001808 <HAL_GPIO_Init+0x50>
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d007      	beq.n	8001808 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017fc:	2b11      	cmp	r3, #17
 80017fe:	d003      	beq.n	8001808 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b12      	cmp	r3, #18
 8001806:	d130      	bne.n	800186a <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	2203      	movs	r2, #3
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	4013      	ands	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	68da      	ldr	r2, [r3, #12]
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	4313      	orrs	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800183e:	2201      	movs	r2, #1
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4013      	ands	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	091b      	lsrs	r3, r3, #4
 8001854:	f003 0201 	and.w	r2, r3, #1
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	4313      	orrs	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	2203      	movs	r2, #3
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4013      	ands	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_Init+0xf2>
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b12      	cmp	r3, #18
 80018a8:	d123      	bne.n	80018f2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	08da      	lsrs	r2, r3, #3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3208      	adds	r2, #8
 80018b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	220f      	movs	r2, #15
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4013      	ands	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	691a      	ldr	r2, [r3, #16]
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	08da      	lsrs	r2, r3, #3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3208      	adds	r2, #8
 80018ec:	6939      	ldr	r1, [r7, #16]
 80018ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	2203      	movs	r2, #3
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	4013      	ands	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 0203 	and.w	r2, r3, #3
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4313      	orrs	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 80ac 	beq.w	8001a8c <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001934:	4b5d      	ldr	r3, [pc, #372]	; (8001aac <HAL_GPIO_Init+0x2f4>)
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	4a5c      	ldr	r2, [pc, #368]	; (8001aac <HAL_GPIO_Init+0x2f4>)
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	6213      	str	r3, [r2, #32]
 8001940:	4b5a      	ldr	r3, [pc, #360]	; (8001aac <HAL_GPIO_Init+0x2f4>)
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800194c:	4a58      	ldr	r2, [pc, #352]	; (8001ab0 <HAL_GPIO_Init+0x2f8>)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	089b      	lsrs	r3, r3, #2
 8001952:	3302      	adds	r3, #2
 8001954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001958:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	220f      	movs	r2, #15
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	4013      	ands	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a50      	ldr	r2, [pc, #320]	; (8001ab4 <HAL_GPIO_Init+0x2fc>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d025      	beq.n	80019c4 <HAL_GPIO_Init+0x20c>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a4f      	ldr	r2, [pc, #316]	; (8001ab8 <HAL_GPIO_Init+0x300>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d01f      	beq.n	80019c0 <HAL_GPIO_Init+0x208>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a4e      	ldr	r2, [pc, #312]	; (8001abc <HAL_GPIO_Init+0x304>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d019      	beq.n	80019bc <HAL_GPIO_Init+0x204>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a4d      	ldr	r2, [pc, #308]	; (8001ac0 <HAL_GPIO_Init+0x308>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d013      	beq.n	80019b8 <HAL_GPIO_Init+0x200>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a4c      	ldr	r2, [pc, #304]	; (8001ac4 <HAL_GPIO_Init+0x30c>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d00d      	beq.n	80019b4 <HAL_GPIO_Init+0x1fc>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a4b      	ldr	r2, [pc, #300]	; (8001ac8 <HAL_GPIO_Init+0x310>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d007      	beq.n	80019b0 <HAL_GPIO_Init+0x1f8>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a4a      	ldr	r2, [pc, #296]	; (8001acc <HAL_GPIO_Init+0x314>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d101      	bne.n	80019ac <HAL_GPIO_Init+0x1f4>
 80019a8:	2306      	movs	r3, #6
 80019aa:	e00c      	b.n	80019c6 <HAL_GPIO_Init+0x20e>
 80019ac:	2307      	movs	r3, #7
 80019ae:	e00a      	b.n	80019c6 <HAL_GPIO_Init+0x20e>
 80019b0:	2305      	movs	r3, #5
 80019b2:	e008      	b.n	80019c6 <HAL_GPIO_Init+0x20e>
 80019b4:	2304      	movs	r3, #4
 80019b6:	e006      	b.n	80019c6 <HAL_GPIO_Init+0x20e>
 80019b8:	2303      	movs	r3, #3
 80019ba:	e004      	b.n	80019c6 <HAL_GPIO_Init+0x20e>
 80019bc:	2302      	movs	r3, #2
 80019be:	e002      	b.n	80019c6 <HAL_GPIO_Init+0x20e>
 80019c0:	2301      	movs	r3, #1
 80019c2:	e000      	b.n	80019c6 <HAL_GPIO_Init+0x20e>
 80019c4:	2300      	movs	r3, #0
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	f002 0203 	and.w	r2, r2, #3
 80019cc:	0092      	lsls	r2, r2, #2
 80019ce:	4093      	lsls	r3, r2
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80019d6:	4936      	ldr	r1, [pc, #216]	; (8001ab0 <HAL_GPIO_Init+0x2f8>)
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	089b      	lsrs	r3, r3, #2
 80019dc:	3302      	adds	r3, #2
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019e4:	4b3a      	ldr	r3, [pc, #232]	; (8001ad0 <HAL_GPIO_Init+0x318>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4013      	ands	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a08:	4a31      	ldr	r2, [pc, #196]	; (8001ad0 <HAL_GPIO_Init+0x318>)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a0e:	4b30      	ldr	r3, [pc, #192]	; (8001ad0 <HAL_GPIO_Init+0x318>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	43db      	mvns	r3, r3
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a32:	4a27      	ldr	r2, [pc, #156]	; (8001ad0 <HAL_GPIO_Init+0x318>)
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a38:	4b25      	ldr	r3, [pc, #148]	; (8001ad0 <HAL_GPIO_Init+0x318>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a5c:	4a1c      	ldr	r2, [pc, #112]	; (8001ad0 <HAL_GPIO_Init+0x318>)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a62:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <HAL_GPIO_Init+0x318>)
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a86:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <HAL_GPIO_Init+0x318>)
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f47f ae97 	bne.w	80017d0 <HAL_GPIO_Init+0x18>
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	371c      	adds	r7, #28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40010000 	.word	0x40010000
 8001ab4:	40020000 	.word	0x40020000
 8001ab8:	40020400 	.word	0x40020400
 8001abc:	40020800 	.word	0x40020800
 8001ac0:	40020c00 	.word	0x40020c00
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40021400 	.word	0x40021400
 8001acc:	40021800 	.word	0x40021800
 8001ad0:	40010400 	.word	0x40010400

08001ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	460b      	mov	r3, r1
 8001ade:	807b      	strh	r3, [r7, #2]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ae4:	787b      	ldrb	r3, [r7, #1]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aea:	887a      	ldrh	r2, [r7, #2]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001af0:	e003      	b.n	8001afa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001af2:	887b      	ldrh	r3, [r7, #2]
 8001af4:	041a      	lsls	r2, r3, #16
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	619a      	str	r2, [r3, #24]
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b16:	887a      	ldrh	r2, [r7, #2]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	041a      	lsls	r2, r3, #16
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	43d9      	mvns	r1, r3
 8001b22:	887b      	ldrh	r3, [r7, #2]
 8001b24:	400b      	ands	r3, r1
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	619a      	str	r2, [r3, #24]
}
 8001b2c:	bf00      	nop
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr
	...

08001b38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e11f      	b.n	8001d8a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d106      	bne.n	8001b64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff f820 	bl	8000ba4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2224      	movs	r2, #36	; 0x24
 8001b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 0201 	bic.w	r2, r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b9c:	f001 fdba 	bl	8003714 <HAL_RCC_GetPCLK1Freq>
 8001ba0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	4a7b      	ldr	r2, [pc, #492]	; (8001d94 <HAL_I2C_Init+0x25c>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d807      	bhi.n	8001bbc <HAL_I2C_Init+0x84>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4a7a      	ldr	r2, [pc, #488]	; (8001d98 <HAL_I2C_Init+0x260>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	bf94      	ite	ls
 8001bb4:	2301      	movls	r3, #1
 8001bb6:	2300      	movhi	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	e006      	b.n	8001bca <HAL_I2C_Init+0x92>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4a77      	ldr	r2, [pc, #476]	; (8001d9c <HAL_I2C_Init+0x264>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	bf94      	ite	ls
 8001bc4:	2301      	movls	r3, #1
 8001bc6:	2300      	movhi	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e0db      	b.n	8001d8a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	4a72      	ldr	r2, [pc, #456]	; (8001da0 <HAL_I2C_Init+0x268>)
 8001bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bda:	0c9b      	lsrs	r3, r3, #18
 8001bdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68ba      	ldr	r2, [r7, #8]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	4a64      	ldr	r2, [pc, #400]	; (8001d94 <HAL_I2C_Init+0x25c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d802      	bhi.n	8001c0c <HAL_I2C_Init+0xd4>
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	e009      	b.n	8001c20 <HAL_I2C_Init+0xe8>
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c12:	fb02 f303 	mul.w	r3, r2, r3
 8001c16:	4a63      	ldr	r2, [pc, #396]	; (8001da4 <HAL_I2C_Init+0x26c>)
 8001c18:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1c:	099b      	lsrs	r3, r3, #6
 8001c1e:	3301      	adds	r3, #1
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	430b      	orrs	r3, r1
 8001c26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	4956      	ldr	r1, [pc, #344]	; (8001d94 <HAL_I2C_Init+0x25c>)
 8001c3c:	428b      	cmp	r3, r1
 8001c3e:	d80d      	bhi.n	8001c5c <HAL_I2C_Init+0x124>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	1e59      	subs	r1, r3, #1
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c4e:	3301      	adds	r3, #1
 8001c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	bf38      	it	cc
 8001c58:	2304      	movcc	r3, #4
 8001c5a:	e04f      	b.n	8001cfc <HAL_I2C_Init+0x1c4>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d111      	bne.n	8001c88 <HAL_I2C_Init+0x150>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	1e58      	subs	r0, r3, #1
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6859      	ldr	r1, [r3, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	440b      	add	r3, r1
 8001c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c76:	3301      	adds	r3, #1
 8001c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	bf0c      	ite	eq
 8001c80:	2301      	moveq	r3, #1
 8001c82:	2300      	movne	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	e012      	b.n	8001cae <HAL_I2C_Init+0x176>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	1e58      	subs	r0, r3, #1
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6859      	ldr	r1, [r3, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	440b      	add	r3, r1
 8001c96:	0099      	lsls	r1, r3, #2
 8001c98:	440b      	add	r3, r1
 8001c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	bf0c      	ite	eq
 8001ca8:	2301      	moveq	r3, #1
 8001caa:	2300      	movne	r3, #0
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_I2C_Init+0x17e>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e022      	b.n	8001cfc <HAL_I2C_Init+0x1c4>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10e      	bne.n	8001cdc <HAL_I2C_Init+0x1a4>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	1e58      	subs	r0, r3, #1
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6859      	ldr	r1, [r3, #4]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	440b      	add	r3, r1
 8001ccc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cda:	e00f      	b.n	8001cfc <HAL_I2C_Init+0x1c4>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	1e58      	subs	r0, r3, #1
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6859      	ldr	r1, [r3, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	0099      	lsls	r1, r3, #2
 8001cec:	440b      	add	r3, r1
 8001cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	6809      	ldr	r1, [r1, #0]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69da      	ldr	r2, [r3, #28]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6911      	ldr	r1, [r2, #16]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68d2      	ldr	r2, [r2, #12]
 8001d36:	4311      	orrs	r1, r2
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	430b      	orrs	r3, r1
 8001d3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695a      	ldr	r2, [r3, #20]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0201 	orr.w	r2, r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2220      	movs	r2, #32
 8001d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	000186a0 	.word	0x000186a0
 8001d98:	001e847f 	.word	0x001e847f
 8001d9c:	003d08ff 	.word	0x003d08ff
 8001da0:	431bde83 	.word	0x431bde83
 8001da4:	10624dd3 	.word	0x10624dd3

08001da8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b088      	sub	sp, #32
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	607a      	str	r2, [r7, #4]
 8001db2:	461a      	mov	r2, r3
 8001db4:	460b      	mov	r3, r1
 8001db6:	817b      	strh	r3, [r7, #10]
 8001db8:	4613      	mov	r3, r2
 8001dba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dbc:	f7ff fbec 	bl	8001598 <HAL_GetTick>
 8001dc0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b20      	cmp	r3, #32
 8001dcc:	f040 80e0 	bne.w	8001f90 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	2319      	movs	r3, #25
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	4970      	ldr	r1, [pc, #448]	; (8001f9c <HAL_I2C_Master_Transmit+0x1f4>)
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f000 fd86 	bl	80028ec <I2C_WaitOnFlagUntilTimeout>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001de6:	2302      	movs	r3, #2
 8001de8:	e0d3      	b.n	8001f92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d101      	bne.n	8001df8 <HAL_I2C_Master_Transmit+0x50>
 8001df4:	2302      	movs	r3, #2
 8001df6:	e0cc      	b.n	8001f92 <HAL_I2C_Master_Transmit+0x1ea>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d007      	beq.n	8001e1e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f042 0201 	orr.w	r2, r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2221      	movs	r2, #33	; 0x21
 8001e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2210      	movs	r2, #16
 8001e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	893a      	ldrh	r2, [r7, #8]
 8001e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	4a50      	ldr	r2, [pc, #320]	; (8001fa0 <HAL_I2C_Master_Transmit+0x1f8>)
 8001e5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e60:	8979      	ldrh	r1, [r7, #10]
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	6a3a      	ldr	r2, [r7, #32]
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 fbf0 	bl	800264c <I2C_MasterRequestWrite>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e08d      	b.n	8001f92 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001e8c:	e066      	b.n	8001f5c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	6a39      	ldr	r1, [r7, #32]
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 fe00 	bl	8002a98 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00d      	beq.n	8001eba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d107      	bne.n	8001eb6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e06b      	b.n	8001f92 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	781a      	ldrb	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d11b      	bne.n	8001f30 <HAL_I2C_Master_Transmit+0x188>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d017      	beq.n	8001f30 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	781a      	ldrb	r2, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	1c5a      	adds	r2, r3, #1
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	6a39      	ldr	r1, [r7, #32]
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f000 fdf0 	bl	8002b1a <I2C_WaitOnBTFFlagUntilTimeout>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00d      	beq.n	8001f5c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d107      	bne.n	8001f58 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f56:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e01a      	b.n	8001f92 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d194      	bne.n	8001e8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2220      	movs	r2, #32
 8001f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e000      	b.n	8001f92 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001f90:	2302      	movs	r3, #2
  }
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	00100002 	.word	0x00100002
 8001fa0:	ffff0000 	.word	0xffff0000

08001fa4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08c      	sub	sp, #48	; 0x30
 8001fa8:	af02      	add	r7, sp, #8
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	607a      	str	r2, [r7, #4]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	817b      	strh	r3, [r7, #10]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fb8:	f7ff faee 	bl	8001598 <HAL_GetTick>
 8001fbc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b20      	cmp	r3, #32
 8001fc8:	f040 820b 	bne.w	80023e2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	2319      	movs	r3, #25
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	497c      	ldr	r1, [pc, #496]	; (80021c8 <HAL_I2C_Master_Receive+0x224>)
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f000 fc88 	bl	80028ec <I2C_WaitOnFlagUntilTimeout>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e1fe      	b.n	80023e4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d101      	bne.n	8001ff4 <HAL_I2C_Master_Receive+0x50>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	e1f7      	b.n	80023e4 <HAL_I2C_Master_Receive+0x440>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b01      	cmp	r3, #1
 8002008:	d007      	beq.n	800201a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f042 0201 	orr.w	r2, r2, #1
 8002018:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002028:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2222      	movs	r2, #34	; 0x22
 800202e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2210      	movs	r2, #16
 8002036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	893a      	ldrh	r2, [r7, #8]
 800204a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002050:	b29a      	uxth	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4a5c      	ldr	r2, [pc, #368]	; (80021cc <HAL_I2C_Master_Receive+0x228>)
 800205a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800205c:	8979      	ldrh	r1, [r7, #10]
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 fb74 	bl	8002750 <I2C_MasterRequestRead>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e1b8      	b.n	80023e4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002076:	2b00      	cmp	r3, #0
 8002078:	d113      	bne.n	80020a2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800207a:	2300      	movs	r3, #0
 800207c:	623b      	str	r3, [r7, #32]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	623b      	str	r3, [r7, #32]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	623b      	str	r3, [r7, #32]
 800208e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	e18c      	b.n	80023bc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d11b      	bne.n	80020e2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	61fb      	str	r3, [r7, #28]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	61fb      	str	r3, [r7, #28]
 80020ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	e16c      	b.n	80023bc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d11b      	bne.n	8002122 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002108:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800210a:	2300      	movs	r3, #0
 800210c:	61bb      	str	r3, [r7, #24]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	61bb      	str	r3, [r7, #24]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	61bb      	str	r3, [r7, #24]
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	e14c      	b.n	80023bc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002130:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002148:	e138      	b.n	80023bc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214e:	2b03      	cmp	r3, #3
 8002150:	f200 80f1 	bhi.w	8002336 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002158:	2b01      	cmp	r3, #1
 800215a:	d123      	bne.n	80021a4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800215c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800215e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f000 fd1b 	bl	8002b9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e139      	b.n	80023e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	691a      	ldr	r2, [r3, #16]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	1c5a      	adds	r2, r3, #1
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218c:	3b01      	subs	r3, #1
 800218e:	b29a      	uxth	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002198:	b29b      	uxth	r3, r3
 800219a:	3b01      	subs	r3, #1
 800219c:	b29a      	uxth	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021a2:	e10b      	b.n	80023bc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d14e      	bne.n	800224a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b2:	2200      	movs	r2, #0
 80021b4:	4906      	ldr	r1, [pc, #24]	; (80021d0 <HAL_I2C_Master_Receive+0x22c>)
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 fb98 	bl	80028ec <I2C_WaitOnFlagUntilTimeout>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d008      	beq.n	80021d4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e10e      	b.n	80023e4 <HAL_I2C_Master_Receive+0x440>
 80021c6:	bf00      	nop
 80021c8:	00100002 	.word	0x00100002
 80021cc:	ffff0000 	.word	0xffff0000
 80021d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691a      	ldr	r2, [r3, #16]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	1c5a      	adds	r2, r3, #1
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002200:	3b01      	subs	r3, #1
 8002202:	b29a      	uxth	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220c:	b29b      	uxth	r3, r3
 800220e:	3b01      	subs	r3, #1
 8002210:	b29a      	uxth	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002228:	1c5a      	adds	r2, r3, #1
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002232:	3b01      	subs	r3, #1
 8002234:	b29a      	uxth	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223e:	b29b      	uxth	r3, r3
 8002240:	3b01      	subs	r3, #1
 8002242:	b29a      	uxth	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002248:	e0b8      	b.n	80023bc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002250:	2200      	movs	r2, #0
 8002252:	4966      	ldr	r1, [pc, #408]	; (80023ec <HAL_I2C_Master_Receive+0x448>)
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 fb49 	bl	80028ec <I2C_WaitOnFlagUntilTimeout>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e0bf      	b.n	80023e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002272:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	691a      	ldr	r2, [r3, #16]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002290:	3b01      	subs	r3, #1
 8002292:	b29a      	uxth	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229c:	b29b      	uxth	r3, r3
 800229e:	3b01      	subs	r3, #1
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ac:	2200      	movs	r2, #0
 80022ae:	494f      	ldr	r1, [pc, #316]	; (80023ec <HAL_I2C_Master_Receive+0x448>)
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 fb1b 	bl	80028ec <I2C_WaitOnFlagUntilTimeout>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e091      	b.n	80023e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691a      	ldr	r2, [r3, #16]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ec:	3b01      	subs	r3, #1
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	1c5a      	adds	r2, r3, #1
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231e:	3b01      	subs	r3, #1
 8002320:	b29a      	uxth	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232a:	b29b      	uxth	r3, r3
 800232c:	3b01      	subs	r3, #1
 800232e:	b29a      	uxth	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002334:	e042      	b.n	80023bc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002338:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 fc2e 	bl	8002b9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e04c      	b.n	80023e4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	691a      	ldr	r2, [r3, #16]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	1c5a      	adds	r2, r3, #1
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002366:	3b01      	subs	r3, #1
 8002368:	b29a      	uxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002372:	b29b      	uxth	r3, r3
 8002374:	3b01      	subs	r3, #1
 8002376:	b29a      	uxth	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	f003 0304 	and.w	r3, r3, #4
 8002386:	2b04      	cmp	r3, #4
 8002388:	d118      	bne.n	80023bc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	691a      	ldr	r2, [r3, #16]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	3b01      	subs	r3, #1
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f47f aec2 	bne.w	800214a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2220      	movs	r2, #32
 80023ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023de:	2300      	movs	r3, #0
 80023e0:	e000      	b.n	80023e4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80023e2:	2302      	movs	r3, #2
  }
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3728      	adds	r7, #40	; 0x28
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	00010004 	.word	0x00010004

080023f0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08a      	sub	sp, #40	; 0x28
 80023f4:	af02      	add	r7, sp, #8
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	607a      	str	r2, [r7, #4]
 80023fa:	603b      	str	r3, [r7, #0]
 80023fc:	460b      	mov	r3, r1
 80023fe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002400:	f7ff f8ca 	bl	8001598 <HAL_GetTick>
 8002404:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002406:	2301      	movs	r3, #1
 8002408:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b20      	cmp	r3, #32
 8002414:	f040 8111 	bne.w	800263a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	2319      	movs	r3, #25
 800241e:	2201      	movs	r2, #1
 8002420:	4988      	ldr	r1, [pc, #544]	; (8002644 <HAL_I2C_IsDeviceReady+0x254>)
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 fa62 	bl	80028ec <I2C_WaitOnFlagUntilTimeout>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800242e:	2302      	movs	r3, #2
 8002430:	e104      	b.n	800263c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002438:	2b01      	cmp	r3, #1
 800243a:	d101      	bne.n	8002440 <HAL_I2C_IsDeviceReady+0x50>
 800243c:	2302      	movs	r3, #2
 800243e:	e0fd      	b.n	800263c <HAL_I2C_IsDeviceReady+0x24c>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b01      	cmp	r3, #1
 8002454:	d007      	beq.n	8002466 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f042 0201 	orr.w	r2, r2, #1
 8002464:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002474:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2224      	movs	r2, #36	; 0x24
 800247a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4a70      	ldr	r2, [pc, #448]	; (8002648 <HAL_I2C_IsDeviceReady+0x258>)
 8002488:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002498:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 fa20 	bl	80028ec <I2C_WaitOnFlagUntilTimeout>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00d      	beq.n	80024ce <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024c0:	d103      	bne.n	80024ca <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024c8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e0b6      	b.n	800263c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024ce:	897b      	ldrh	r3, [r7, #10]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	461a      	mov	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024dc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80024de:	f7ff f85b 	bl	8001598 <HAL_GetTick>
 80024e2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	bf0c      	ite	eq
 80024f2:	2301      	moveq	r3, #1
 80024f4:	2300      	movne	r3, #0
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002508:	bf0c      	ite	eq
 800250a:	2301      	moveq	r3, #1
 800250c:	2300      	movne	r3, #0
 800250e:	b2db      	uxtb	r3, r3
 8002510:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002512:	e025      	b.n	8002560 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002514:	f7ff f840 	bl	8001598 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	429a      	cmp	r2, r3
 8002522:	d302      	bcc.n	800252a <HAL_I2C_IsDeviceReady+0x13a>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d103      	bne.n	8002532 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	22a0      	movs	r2, #160	; 0xa0
 800252e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b02      	cmp	r3, #2
 800253e:	bf0c      	ite	eq
 8002540:	2301      	moveq	r3, #1
 8002542:	2300      	movne	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002556:	bf0c      	ite	eq
 8002558:	2301      	moveq	r3, #1
 800255a:	2300      	movne	r3, #0
 800255c:	b2db      	uxtb	r3, r3
 800255e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2ba0      	cmp	r3, #160	; 0xa0
 800256a:	d005      	beq.n	8002578 <HAL_I2C_IsDeviceReady+0x188>
 800256c:	7dfb      	ldrb	r3, [r7, #23]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d102      	bne.n	8002578 <HAL_I2C_IsDeviceReady+0x188>
 8002572:	7dbb      	ldrb	r3, [r7, #22]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0cd      	beq.n	8002514 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2220      	movs	r2, #32
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b02      	cmp	r3, #2
 800258c:	d129      	bne.n	80025e2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800259c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	613b      	str	r3, [r7, #16]
 80025b2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	2319      	movs	r3, #25
 80025ba:	2201      	movs	r2, #1
 80025bc:	4921      	ldr	r1, [pc, #132]	; (8002644 <HAL_I2C_IsDeviceReady+0x254>)
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 f994 	bl	80028ec <I2C_WaitOnFlagUntilTimeout>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e036      	b.n	800263c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2220      	movs	r2, #32
 80025d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80025de:	2300      	movs	r3, #0
 80025e0:	e02c      	b.n	800263c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025fa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	2319      	movs	r3, #25
 8002602:	2201      	movs	r2, #1
 8002604:	490f      	ldr	r1, [pc, #60]	; (8002644 <HAL_I2C_IsDeviceReady+0x254>)
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 f970 	bl	80028ec <I2C_WaitOnFlagUntilTimeout>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e012      	b.n	800263c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	3301      	adds	r3, #1
 800261a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	429a      	cmp	r2, r3
 8002622:	f4ff af32 	bcc.w	800248a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2220      	movs	r2, #32
 800262a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800263a:	2302      	movs	r3, #2
  }
}
 800263c:	4618      	mov	r0, r3
 800263e:	3720      	adds	r7, #32
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	00100002 	.word	0x00100002
 8002648:	ffff0000 	.word	0xffff0000

0800264c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af02      	add	r7, sp, #8
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	607a      	str	r2, [r7, #4]
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	460b      	mov	r3, r1
 800265a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002660:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2b08      	cmp	r3, #8
 8002666:	d006      	beq.n	8002676 <I2C_MasterRequestWrite+0x2a>
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d003      	beq.n	8002676 <I2C_MasterRequestWrite+0x2a>
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002674:	d108      	bne.n	8002688 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	e00b      	b.n	80026a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268c:	2b12      	cmp	r3, #18
 800268e:	d107      	bne.n	80026a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800269e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f000 f91d 	bl	80028ec <I2C_WaitOnFlagUntilTimeout>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00d      	beq.n	80026d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026c6:	d103      	bne.n	80026d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e035      	b.n	8002740 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026dc:	d108      	bne.n	80026f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026de:	897b      	ldrh	r3, [r7, #10]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	461a      	mov	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026ec:	611a      	str	r2, [r3, #16]
 80026ee:	e01b      	b.n	8002728 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026f0:	897b      	ldrh	r3, [r7, #10]
 80026f2:	11db      	asrs	r3, r3, #7
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	f003 0306 	and.w	r3, r3, #6
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	f063 030f 	orn	r3, r3, #15
 8002700:	b2da      	uxtb	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	490e      	ldr	r1, [pc, #56]	; (8002748 <I2C_MasterRequestWrite+0xfc>)
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 f943 	bl	800299a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e010      	b.n	8002740 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800271e:	897b      	ldrh	r3, [r7, #10]
 8002720:	b2da      	uxtb	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	4907      	ldr	r1, [pc, #28]	; (800274c <I2C_MasterRequestWrite+0x100>)
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 f933 	bl	800299a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	00010008 	.word	0x00010008
 800274c:	00010002 	.word	0x00010002

08002750 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b088      	sub	sp, #32
 8002754:	af02      	add	r7, sp, #8
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	607a      	str	r2, [r7, #4]
 800275a:	603b      	str	r3, [r7, #0]
 800275c:	460b      	mov	r3, r1
 800275e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002774:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	2b08      	cmp	r3, #8
 800277a:	d006      	beq.n	800278a <I2C_MasterRequestRead+0x3a>
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d003      	beq.n	800278a <I2C_MasterRequestRead+0x3a>
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002788:	d108      	bne.n	800279c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	e00b      	b.n	80027b4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a0:	2b11      	cmp	r3, #17
 80027a2:	d107      	bne.n	80027b4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 f893 	bl	80028ec <I2C_WaitOnFlagUntilTimeout>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00d      	beq.n	80027e8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027da:	d103      	bne.n	80027e4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e079      	b.n	80028dc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027f0:	d108      	bne.n	8002804 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80027f2:	897b      	ldrh	r3, [r7, #10]
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	611a      	str	r2, [r3, #16]
 8002802:	e05f      	b.n	80028c4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002804:	897b      	ldrh	r3, [r7, #10]
 8002806:	11db      	asrs	r3, r3, #7
 8002808:	b2db      	uxtb	r3, r3
 800280a:	f003 0306 	and.w	r3, r3, #6
 800280e:	b2db      	uxtb	r3, r3
 8002810:	f063 030f 	orn	r3, r3, #15
 8002814:	b2da      	uxtb	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	4930      	ldr	r1, [pc, #192]	; (80028e4 <I2C_MasterRequestRead+0x194>)
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 f8b9 	bl	800299a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e054      	b.n	80028dc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002832:	897b      	ldrh	r3, [r7, #10]
 8002834:	b2da      	uxtb	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	4929      	ldr	r1, [pc, #164]	; (80028e8 <I2C_MasterRequestRead+0x198>)
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 f8a9 	bl	800299a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e044      	b.n	80028dc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002852:	2300      	movs	r3, #0
 8002854:	613b      	str	r3, [r7, #16]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002876:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 f831 	bl	80028ec <I2C_WaitOnFlagUntilTimeout>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00d      	beq.n	80028ac <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800289e:	d103      	bne.n	80028a8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028a6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e017      	b.n	80028dc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80028ac:	897b      	ldrh	r3, [r7, #10]
 80028ae:	11db      	asrs	r3, r3, #7
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	f003 0306 	and.w	r3, r3, #6
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	f063 030e 	orn	r3, r3, #14
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	4907      	ldr	r1, [pc, #28]	; (80028e8 <I2C_MasterRequestRead+0x198>)
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 f865 	bl	800299a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	00010008 	.word	0x00010008
 80028e8:	00010002 	.word	0x00010002

080028ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	603b      	str	r3, [r7, #0]
 80028f8:	4613      	mov	r3, r2
 80028fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028fc:	e025      	b.n	800294a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002904:	d021      	beq.n	800294a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002906:	f7fe fe47 	bl	8001598 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d302      	bcc.n	800291c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d116      	bne.n	800294a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2220      	movs	r2, #32
 8002926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f043 0220 	orr.w	r2, r3, #32
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e023      	b.n	8002992 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	0c1b      	lsrs	r3, r3, #16
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b01      	cmp	r3, #1
 8002952:	d10d      	bne.n	8002970 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	43da      	mvns	r2, r3
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	4013      	ands	r3, r2
 8002960:	b29b      	uxth	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	bf0c      	ite	eq
 8002966:	2301      	moveq	r3, #1
 8002968:	2300      	movne	r3, #0
 800296a:	b2db      	uxtb	r3, r3
 800296c:	461a      	mov	r2, r3
 800296e:	e00c      	b.n	800298a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	43da      	mvns	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	4013      	ands	r3, r2
 800297c:	b29b      	uxth	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	bf0c      	ite	eq
 8002982:	2301      	moveq	r3, #1
 8002984:	2300      	movne	r3, #0
 8002986:	b2db      	uxtb	r3, r3
 8002988:	461a      	mov	r2, r3
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	429a      	cmp	r2, r3
 800298e:	d0b6      	beq.n	80028fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b084      	sub	sp, #16
 800299e:	af00      	add	r7, sp, #0
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
 80029a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029a8:	e051      	b.n	8002a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b8:	d123      	bne.n	8002a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2220      	movs	r2, #32
 80029de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f043 0204 	orr.w	r2, r3, #4
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e046      	b.n	8002a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a08:	d021      	beq.n	8002a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a0a:	f7fe fdc5 	bl	8001598 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d302      	bcc.n	8002a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d116      	bne.n	8002a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f043 0220 	orr.w	r2, r3, #32
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e020      	b.n	8002a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	0c1b      	lsrs	r3, r3, #16
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d10c      	bne.n	8002a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	43da      	mvns	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	4013      	ands	r3, r2
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	bf14      	ite	ne
 8002a6a:	2301      	movne	r3, #1
 8002a6c:	2300      	moveq	r3, #0
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	e00b      	b.n	8002a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	43da      	mvns	r2, r3
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	bf14      	ite	ne
 8002a84:	2301      	movne	r3, #1
 8002a86:	2300      	moveq	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d18d      	bne.n	80029aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002aa4:	e02d      	b.n	8002b02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 f8ce 	bl	8002c48 <I2C_IsAcknowledgeFailed>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e02d      	b.n	8002b12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002abc:	d021      	beq.n	8002b02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002abe:	f7fe fd6b 	bl	8001598 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d302      	bcc.n	8002ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d116      	bne.n	8002b02 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2220      	movs	r2, #32
 8002ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f043 0220 	orr.w	r2, r3, #32
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e007      	b.n	8002b12 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b0c:	2b80      	cmp	r3, #128	; 0x80
 8002b0e:	d1ca      	bne.n	8002aa6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b084      	sub	sp, #16
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	60f8      	str	r0, [r7, #12]
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b26:	e02d      	b.n	8002b84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 f88d 	bl	8002c48 <I2C_IsAcknowledgeFailed>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e02d      	b.n	8002b94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3e:	d021      	beq.n	8002b84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b40:	f7fe fd2a 	bl	8001598 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d302      	bcc.n	8002b56 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d116      	bne.n	8002b84 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	f043 0220 	orr.w	r2, r3, #32
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e007      	b.n	8002b94 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	f003 0304 	and.w	r3, r3, #4
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d1ca      	bne.n	8002b28 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ba8:	e042      	b.n	8002c30 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	2b10      	cmp	r3, #16
 8002bb6:	d119      	bne.n	8002bec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f06f 0210 	mvn.w	r2, #16
 8002bc0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e029      	b.n	8002c40 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bec:	f7fe fcd4 	bl	8001598 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d302      	bcc.n	8002c02 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d116      	bne.n	8002c30 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	f043 0220 	orr.w	r2, r3, #32
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e007      	b.n	8002c40 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3a:	2b40      	cmp	r3, #64	; 0x40
 8002c3c:	d1b5      	bne.n	8002baa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c5e:	d11b      	bne.n	8002c98 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c68:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c84:	f043 0204 	orr.w	r2, r3, #4
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e000      	b.n	8002c9a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e31d      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb6:	4b94      	ldr	r3, [pc, #592]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
 8002cbe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cc0:	4b91      	ldr	r3, [pc, #580]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d07b      	beq.n	8002dce <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d006      	beq.n	8002cea <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	2b0c      	cmp	r3, #12
 8002ce0:	d10f      	bne.n	8002d02 <HAL_RCC_OscConfig+0x5e>
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce8:	d10b      	bne.n	8002d02 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cea:	4b87      	ldr	r3, [pc, #540]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d06a      	beq.n	8002dcc <HAL_RCC_OscConfig+0x128>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d166      	bne.n	8002dcc <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e2f7      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d106      	bne.n	8002d18 <HAL_RCC_OscConfig+0x74>
 8002d0a:	4b7f      	ldr	r3, [pc, #508]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a7e      	ldr	r2, [pc, #504]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	e02d      	b.n	8002d74 <HAL_RCC_OscConfig+0xd0>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10c      	bne.n	8002d3a <HAL_RCC_OscConfig+0x96>
 8002d20:	4b79      	ldr	r3, [pc, #484]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a78      	ldr	r2, [pc, #480]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	4b76      	ldr	r3, [pc, #472]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a75      	ldr	r2, [pc, #468]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	e01c      	b.n	8002d74 <HAL_RCC_OscConfig+0xd0>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b05      	cmp	r3, #5
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCC_OscConfig+0xb8>
 8002d42:	4b71      	ldr	r3, [pc, #452]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a70      	ldr	r2, [pc, #448]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	4b6e      	ldr	r3, [pc, #440]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a6d      	ldr	r2, [pc, #436]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	e00b      	b.n	8002d74 <HAL_RCC_OscConfig+0xd0>
 8002d5c:	4b6a      	ldr	r3, [pc, #424]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a69      	ldr	r2, [pc, #420]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d66:	6013      	str	r3, [r2, #0]
 8002d68:	4b67      	ldr	r3, [pc, #412]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a66      	ldr	r2, [pc, #408]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d013      	beq.n	8002da4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7c:	f7fe fc0c 	bl	8001598 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d84:	f7fe fc08 	bl	8001598 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b64      	cmp	r3, #100	; 0x64
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e2ad      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d96:	4b5c      	ldr	r3, [pc, #368]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f0      	beq.n	8002d84 <HAL_RCC_OscConfig+0xe0>
 8002da2:	e014      	b.n	8002dce <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da4:	f7fe fbf8 	bl	8001598 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dac:	f7fe fbf4 	bl	8001598 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b64      	cmp	r3, #100	; 0x64
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e299      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002dbe:	4b52      	ldr	r3, [pc, #328]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0x108>
 8002dca:	e000      	b.n	8002dce <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d05a      	beq.n	8002e90 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	d005      	beq.n	8002dec <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	2b0c      	cmp	r3, #12
 8002de4:	d119      	bne.n	8002e1a <HAL_RCC_OscConfig+0x176>
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d116      	bne.n	8002e1a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dec:	4b46      	ldr	r3, [pc, #280]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d005      	beq.n	8002e04 <HAL_RCC_OscConfig+0x160>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d001      	beq.n	8002e04 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e276      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e04:	4b40      	ldr	r3, [pc, #256]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	021b      	lsls	r3, r3, #8
 8002e12:	493d      	ldr	r1, [pc, #244]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e18:	e03a      	b.n	8002e90 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d020      	beq.n	8002e64 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e22:	4b3a      	ldr	r3, [pc, #232]	; (8002f0c <HAL_RCC_OscConfig+0x268>)
 8002e24:	2201      	movs	r2, #1
 8002e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7fe fbb6 	bl	8001598 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e30:	f7fe fbb2 	bl	8001598 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e257      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e42:	4b31      	ldr	r3, [pc, #196]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f0      	beq.n	8002e30 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4e:	4b2e      	ldr	r3, [pc, #184]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	021b      	lsls	r3, r3, #8
 8002e5c:	492a      	ldr	r1, [pc, #168]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	604b      	str	r3, [r1, #4]
 8002e62:	e015      	b.n	8002e90 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e64:	4b29      	ldr	r3, [pc, #164]	; (8002f0c <HAL_RCC_OscConfig+0x268>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6a:	f7fe fb95 	bl	8001598 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e72:	f7fe fb91 	bl	8001598 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e236      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e84:	4b20      	ldr	r3, [pc, #128]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1f0      	bne.n	8002e72 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0310 	and.w	r3, r3, #16
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 80b8 	beq.w	800300e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d170      	bne.n	8002f86 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ea4:	4b18      	ldr	r3, [pc, #96]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_RCC_OscConfig+0x218>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e21a      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a1a      	ldr	r2, [r3, #32]
 8002ec0:	4b11      	ldr	r3, [pc, #68]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d921      	bls.n	8002f10 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 fc47 	bl	8003764 <RCC_SetFlashLatencyFromMSIRange>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e208      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ee0:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	4906      	ldr	r1, [pc, #24]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ef2:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69db      	ldr	r3, [r3, #28]
 8002efe:	061b      	lsls	r3, r3, #24
 8002f00:	4901      	ldr	r1, [pc, #4]	; (8002f08 <HAL_RCC_OscConfig+0x264>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	604b      	str	r3, [r1, #4]
 8002f06:	e020      	b.n	8002f4a <HAL_RCC_OscConfig+0x2a6>
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f10:	4ba4      	ldr	r3, [pc, #656]	; (80031a4 <HAL_RCC_OscConfig+0x500>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	49a1      	ldr	r1, [pc, #644]	; (80031a4 <HAL_RCC_OscConfig+0x500>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f22:	4ba0      	ldr	r3, [pc, #640]	; (80031a4 <HAL_RCC_OscConfig+0x500>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	061b      	lsls	r3, r3, #24
 8002f30:	499c      	ldr	r1, [pc, #624]	; (80031a4 <HAL_RCC_OscConfig+0x500>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 fc12 	bl	8003764 <RCC_SetFlashLatencyFromMSIRange>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e1d3      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	0b5b      	lsrs	r3, r3, #13
 8002f50:	3301      	adds	r3, #1
 8002f52:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002f5a:	4a92      	ldr	r2, [pc, #584]	; (80031a4 <HAL_RCC_OscConfig+0x500>)
 8002f5c:	6892      	ldr	r2, [r2, #8]
 8002f5e:	0912      	lsrs	r2, r2, #4
 8002f60:	f002 020f 	and.w	r2, r2, #15
 8002f64:	4990      	ldr	r1, [pc, #576]	; (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002f66:	5c8a      	ldrb	r2, [r1, r2]
 8002f68:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002f6a:	4a90      	ldr	r2, [pc, #576]	; (80031ac <HAL_RCC_OscConfig+0x508>)
 8002f6c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f6e:	4b90      	ldr	r3, [pc, #576]	; (80031b0 <HAL_RCC_OscConfig+0x50c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fe fac4 	bl	8001500 <HAL_InitTick>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d045      	beq.n	800300e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002f82:	7bfb      	ldrb	r3, [r7, #15]
 8002f84:	e1b5      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d029      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f8e:	4b89      	ldr	r3, [pc, #548]	; (80031b4 <HAL_RCC_OscConfig+0x510>)
 8002f90:	2201      	movs	r2, #1
 8002f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f94:	f7fe fb00 	bl	8001598 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f9c:	f7fe fafc 	bl	8001598 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e1a1      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002fae:	4b7d      	ldr	r3, [pc, #500]	; (80031a4 <HAL_RCC_OscConfig+0x500>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0f0      	beq.n	8002f9c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fba:	4b7a      	ldr	r3, [pc, #488]	; (80031a4 <HAL_RCC_OscConfig+0x500>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	4977      	ldr	r1, [pc, #476]	; (80031a4 <HAL_RCC_OscConfig+0x500>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fcc:	4b75      	ldr	r3, [pc, #468]	; (80031a4 <HAL_RCC_OscConfig+0x500>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	061b      	lsls	r3, r3, #24
 8002fda:	4972      	ldr	r1, [pc, #456]	; (80031a4 <HAL_RCC_OscConfig+0x500>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
 8002fe0:	e015      	b.n	800300e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fe2:	4b74      	ldr	r3, [pc, #464]	; (80031b4 <HAL_RCC_OscConfig+0x510>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe8:	f7fe fad6 	bl	8001598 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ff0:	f7fe fad2 	bl	8001598 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e177      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003002:	4b68      	ldr	r3, [pc, #416]	; (80031a4 <HAL_RCC_OscConfig+0x500>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1f0      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b00      	cmp	r3, #0
 8003018:	d030      	beq.n	800307c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d016      	beq.n	8003050 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003022:	4b65      	ldr	r3, [pc, #404]	; (80031b8 <HAL_RCC_OscConfig+0x514>)
 8003024:	2201      	movs	r2, #1
 8003026:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003028:	f7fe fab6 	bl	8001598 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003030:	f7fe fab2 	bl	8001598 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e157      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003042:	4b58      	ldr	r3, [pc, #352]	; (80031a4 <HAL_RCC_OscConfig+0x500>)
 8003044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0f0      	beq.n	8003030 <HAL_RCC_OscConfig+0x38c>
 800304e:	e015      	b.n	800307c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003050:	4b59      	ldr	r3, [pc, #356]	; (80031b8 <HAL_RCC_OscConfig+0x514>)
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003056:	f7fe fa9f 	bl	8001598 <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800305e:	f7fe fa9b 	bl	8001598 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e140      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003070:	4b4c      	ldr	r3, [pc, #304]	; (80031a4 <HAL_RCC_OscConfig+0x500>)
 8003072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1f0      	bne.n	800305e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 80b5 	beq.w	80031f4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800308a:	2300      	movs	r3, #0
 800308c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800308e:	4b45      	ldr	r3, [pc, #276]	; (80031a4 <HAL_RCC_OscConfig+0x500>)
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10d      	bne.n	80030b6 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800309a:	4b42      	ldr	r3, [pc, #264]	; (80031a4 <HAL_RCC_OscConfig+0x500>)
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	4a41      	ldr	r2, [pc, #260]	; (80031a4 <HAL_RCC_OscConfig+0x500>)
 80030a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a4:	6253      	str	r3, [r2, #36]	; 0x24
 80030a6:	4b3f      	ldr	r3, [pc, #252]	; (80031a4 <HAL_RCC_OscConfig+0x500>)
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ae:	60bb      	str	r3, [r7, #8]
 80030b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030b2:	2301      	movs	r3, #1
 80030b4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b6:	4b41      	ldr	r3, [pc, #260]	; (80031bc <HAL_RCC_OscConfig+0x518>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d118      	bne.n	80030f4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030c2:	4b3e      	ldr	r3, [pc, #248]	; (80031bc <HAL_RCC_OscConfig+0x518>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a3d      	ldr	r2, [pc, #244]	; (80031bc <HAL_RCC_OscConfig+0x518>)
 80030c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ce:	f7fe fa63 	bl	8001598 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d6:	f7fe fa5f 	bl	8001598 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b64      	cmp	r3, #100	; 0x64
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e104      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e8:	4b34      	ldr	r3, [pc, #208]	; (80031bc <HAL_RCC_OscConfig+0x518>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0f0      	beq.n	80030d6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d106      	bne.n	800310a <HAL_RCC_OscConfig+0x466>
 80030fc:	4b29      	ldr	r3, [pc, #164]	; (80031a4 <HAL_RCC_OscConfig+0x500>)
 80030fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003100:	4a28      	ldr	r2, [pc, #160]	; (80031a4 <HAL_RCC_OscConfig+0x500>)
 8003102:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003106:	6353      	str	r3, [r2, #52]	; 0x34
 8003108:	e02d      	b.n	8003166 <HAL_RCC_OscConfig+0x4c2>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10c      	bne.n	800312c <HAL_RCC_OscConfig+0x488>
 8003112:	4b24      	ldr	r3, [pc, #144]	; (80031a4 <HAL_RCC_OscConfig+0x500>)
 8003114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003116:	4a23      	ldr	r2, [pc, #140]	; (80031a4 <HAL_RCC_OscConfig+0x500>)
 8003118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800311c:	6353      	str	r3, [r2, #52]	; 0x34
 800311e:	4b21      	ldr	r3, [pc, #132]	; (80031a4 <HAL_RCC_OscConfig+0x500>)
 8003120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003122:	4a20      	ldr	r2, [pc, #128]	; (80031a4 <HAL_RCC_OscConfig+0x500>)
 8003124:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003128:	6353      	str	r3, [r2, #52]	; 0x34
 800312a:	e01c      	b.n	8003166 <HAL_RCC_OscConfig+0x4c2>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2b05      	cmp	r3, #5
 8003132:	d10c      	bne.n	800314e <HAL_RCC_OscConfig+0x4aa>
 8003134:	4b1b      	ldr	r3, [pc, #108]	; (80031a4 <HAL_RCC_OscConfig+0x500>)
 8003136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003138:	4a1a      	ldr	r2, [pc, #104]	; (80031a4 <HAL_RCC_OscConfig+0x500>)
 800313a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800313e:	6353      	str	r3, [r2, #52]	; 0x34
 8003140:	4b18      	ldr	r3, [pc, #96]	; (80031a4 <HAL_RCC_OscConfig+0x500>)
 8003142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003144:	4a17      	ldr	r2, [pc, #92]	; (80031a4 <HAL_RCC_OscConfig+0x500>)
 8003146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800314a:	6353      	str	r3, [r2, #52]	; 0x34
 800314c:	e00b      	b.n	8003166 <HAL_RCC_OscConfig+0x4c2>
 800314e:	4b15      	ldr	r3, [pc, #84]	; (80031a4 <HAL_RCC_OscConfig+0x500>)
 8003150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003152:	4a14      	ldr	r2, [pc, #80]	; (80031a4 <HAL_RCC_OscConfig+0x500>)
 8003154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003158:	6353      	str	r3, [r2, #52]	; 0x34
 800315a:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <HAL_RCC_OscConfig+0x500>)
 800315c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800315e:	4a11      	ldr	r2, [pc, #68]	; (80031a4 <HAL_RCC_OscConfig+0x500>)
 8003160:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003164:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d015      	beq.n	800319a <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800316e:	f7fe fa13 	bl	8001598 <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003174:	e00a      	b.n	800318c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003176:	f7fe fa0f 	bl	8001598 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	f241 3288 	movw	r2, #5000	; 0x1388
 8003184:	4293      	cmp	r3, r2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e0b2      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800318c:	4b05      	ldr	r3, [pc, #20]	; (80031a4 <HAL_RCC_OscConfig+0x500>)
 800318e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003190:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0ee      	beq.n	8003176 <HAL_RCC_OscConfig+0x4d2>
 8003198:	e023      	b.n	80031e2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800319a:	f7fe f9fd 	bl	8001598 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031a0:	e019      	b.n	80031d6 <HAL_RCC_OscConfig+0x532>
 80031a2:	bf00      	nop
 80031a4:	40023800 	.word	0x40023800
 80031a8:	080045c0 	.word	0x080045c0
 80031ac:	20000000 	.word	0x20000000
 80031b0:	20000004 	.word	0x20000004
 80031b4:	42470020 	.word	0x42470020
 80031b8:	42470680 	.word	0x42470680
 80031bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031c0:	f7fe f9ea 	bl	8001598 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e08d      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031d6:	4b49      	ldr	r3, [pc, #292]	; (80032fc <HAL_RCC_OscConfig+0x658>)
 80031d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1ee      	bne.n	80031c0 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031e2:	7ffb      	ldrb	r3, [r7, #31]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d105      	bne.n	80031f4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e8:	4b44      	ldr	r3, [pc, #272]	; (80032fc <HAL_RCC_OscConfig+0x658>)
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	4a43      	ldr	r2, [pc, #268]	; (80032fc <HAL_RCC_OscConfig+0x658>)
 80031ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031f2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d079      	beq.n	80032f0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	2b0c      	cmp	r3, #12
 8003200:	d056      	beq.n	80032b0 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	2b02      	cmp	r3, #2
 8003208:	d13b      	bne.n	8003282 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800320a:	4b3d      	ldr	r3, [pc, #244]	; (8003300 <HAL_RCC_OscConfig+0x65c>)
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003210:	f7fe f9c2 	bl	8001598 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003218:	f7fe f9be 	bl	8001598 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e063      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800322a:	4b34      	ldr	r3, [pc, #208]	; (80032fc <HAL_RCC_OscConfig+0x658>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f0      	bne.n	8003218 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003236:	4b31      	ldr	r3, [pc, #196]	; (80032fc <HAL_RCC_OscConfig+0x658>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003246:	4319      	orrs	r1, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324c:	430b      	orrs	r3, r1
 800324e:	492b      	ldr	r1, [pc, #172]	; (80032fc <HAL_RCC_OscConfig+0x658>)
 8003250:	4313      	orrs	r3, r2
 8003252:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003254:	4b2a      	ldr	r3, [pc, #168]	; (8003300 <HAL_RCC_OscConfig+0x65c>)
 8003256:	2201      	movs	r2, #1
 8003258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325a:	f7fe f99d 	bl	8001598 <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003262:	f7fe f999 	bl	8001598 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e03e      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003274:	4b21      	ldr	r3, [pc, #132]	; (80032fc <HAL_RCC_OscConfig+0x658>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0f0      	beq.n	8003262 <HAL_RCC_OscConfig+0x5be>
 8003280:	e036      	b.n	80032f0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003282:	4b1f      	ldr	r3, [pc, #124]	; (8003300 <HAL_RCC_OscConfig+0x65c>)
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7fe f986 	bl	8001598 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003290:	f7fe f982 	bl	8001598 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e027      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032a2:	4b16      	ldr	r3, [pc, #88]	; (80032fc <HAL_RCC_OscConfig+0x658>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0x5ec>
 80032ae:	e01f      	b.n	80032f0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d101      	bne.n	80032bc <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e01a      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032bc:	4b0f      	ldr	r3, [pc, #60]	; (80032fc <HAL_RCC_OscConfig+0x658>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d10d      	bne.n	80032ec <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032da:	429a      	cmp	r2, r3
 80032dc:	d106      	bne.n	80032ec <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d001      	beq.n	80032f0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e000      	b.n	80032f2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3720      	adds	r7, #32
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40023800 	.word	0x40023800
 8003300:	42470060 	.word	0x42470060

08003304 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e11a      	b.n	800354e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003318:	4b8f      	ldr	r3, [pc, #572]	; (8003558 <HAL_RCC_ClockConfig+0x254>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d919      	bls.n	800335a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d105      	bne.n	8003338 <HAL_RCC_ClockConfig+0x34>
 800332c:	4b8a      	ldr	r3, [pc, #552]	; (8003558 <HAL_RCC_ClockConfig+0x254>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a89      	ldr	r2, [pc, #548]	; (8003558 <HAL_RCC_ClockConfig+0x254>)
 8003332:	f043 0304 	orr.w	r3, r3, #4
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	4b87      	ldr	r3, [pc, #540]	; (8003558 <HAL_RCC_ClockConfig+0x254>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f023 0201 	bic.w	r2, r3, #1
 8003340:	4985      	ldr	r1, [pc, #532]	; (8003558 <HAL_RCC_ClockConfig+0x254>)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	4313      	orrs	r3, r2
 8003346:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003348:	4b83      	ldr	r3, [pc, #524]	; (8003558 <HAL_RCC_ClockConfig+0x254>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d001      	beq.n	800335a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e0f9      	b.n	800354e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d008      	beq.n	8003378 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003366:	4b7d      	ldr	r3, [pc, #500]	; (800355c <HAL_RCC_ClockConfig+0x258>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	497a      	ldr	r1, [pc, #488]	; (800355c <HAL_RCC_ClockConfig+0x258>)
 8003374:	4313      	orrs	r3, r2
 8003376:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 808e 	beq.w	80034a2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d107      	bne.n	800339e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800338e:	4b73      	ldr	r3, [pc, #460]	; (800355c <HAL_RCC_ClockConfig+0x258>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d121      	bne.n	80033de <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e0d7      	b.n	800354e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b03      	cmp	r3, #3
 80033a4:	d107      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033a6:	4b6d      	ldr	r3, [pc, #436]	; (800355c <HAL_RCC_ClockConfig+0x258>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d115      	bne.n	80033de <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e0cb      	b.n	800354e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d107      	bne.n	80033ce <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033be:	4b67      	ldr	r3, [pc, #412]	; (800355c <HAL_RCC_ClockConfig+0x258>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d109      	bne.n	80033de <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e0bf      	b.n	800354e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80033ce:	4b63      	ldr	r3, [pc, #396]	; (800355c <HAL_RCC_ClockConfig+0x258>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e0b7      	b.n	800354e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033de:	4b5f      	ldr	r3, [pc, #380]	; (800355c <HAL_RCC_ClockConfig+0x258>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f023 0203 	bic.w	r2, r3, #3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	495c      	ldr	r1, [pc, #368]	; (800355c <HAL_RCC_ClockConfig+0x258>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033f0:	f7fe f8d2 	bl	8001598 <HAL_GetTick>
 80033f4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d112      	bne.n	8003424 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80033fe:	e00a      	b.n	8003416 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003400:	f7fe f8ca 	bl	8001598 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	f241 3288 	movw	r2, #5000	; 0x1388
 800340e:	4293      	cmp	r3, r2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e09b      	b.n	800354e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003416:	4b51      	ldr	r3, [pc, #324]	; (800355c <HAL_RCC_ClockConfig+0x258>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 030c 	and.w	r3, r3, #12
 800341e:	2b08      	cmp	r3, #8
 8003420:	d1ee      	bne.n	8003400 <HAL_RCC_ClockConfig+0xfc>
 8003422:	e03e      	b.n	80034a2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b03      	cmp	r3, #3
 800342a:	d112      	bne.n	8003452 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800342c:	e00a      	b.n	8003444 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800342e:	f7fe f8b3 	bl	8001598 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	f241 3288 	movw	r2, #5000	; 0x1388
 800343c:	4293      	cmp	r3, r2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e084      	b.n	800354e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003444:	4b45      	ldr	r3, [pc, #276]	; (800355c <HAL_RCC_ClockConfig+0x258>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 030c 	and.w	r3, r3, #12
 800344c:	2b0c      	cmp	r3, #12
 800344e:	d1ee      	bne.n	800342e <HAL_RCC_ClockConfig+0x12a>
 8003450:	e027      	b.n	80034a2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d11d      	bne.n	8003496 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800345a:	e00a      	b.n	8003472 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800345c:	f7fe f89c 	bl	8001598 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	f241 3288 	movw	r2, #5000	; 0x1388
 800346a:	4293      	cmp	r3, r2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e06d      	b.n	800354e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003472:	4b3a      	ldr	r3, [pc, #232]	; (800355c <HAL_RCC_ClockConfig+0x258>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 030c 	and.w	r3, r3, #12
 800347a:	2b04      	cmp	r3, #4
 800347c:	d1ee      	bne.n	800345c <HAL_RCC_ClockConfig+0x158>
 800347e:	e010      	b.n	80034a2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003480:	f7fe f88a 	bl	8001598 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	f241 3288 	movw	r2, #5000	; 0x1388
 800348e:	4293      	cmp	r3, r2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e05b      	b.n	800354e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003496:	4b31      	ldr	r3, [pc, #196]	; (800355c <HAL_RCC_ClockConfig+0x258>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 030c 	and.w	r3, r3, #12
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1ee      	bne.n	8003480 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034a2:	4b2d      	ldr	r3, [pc, #180]	; (8003558 <HAL_RCC_ClockConfig+0x254>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d219      	bcs.n	80034e4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d105      	bne.n	80034c2 <HAL_RCC_ClockConfig+0x1be>
 80034b6:	4b28      	ldr	r3, [pc, #160]	; (8003558 <HAL_RCC_ClockConfig+0x254>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a27      	ldr	r2, [pc, #156]	; (8003558 <HAL_RCC_ClockConfig+0x254>)
 80034bc:	f043 0304 	orr.w	r3, r3, #4
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	4b25      	ldr	r3, [pc, #148]	; (8003558 <HAL_RCC_ClockConfig+0x254>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f023 0201 	bic.w	r2, r3, #1
 80034ca:	4923      	ldr	r1, [pc, #140]	; (8003558 <HAL_RCC_ClockConfig+0x254>)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d2:	4b21      	ldr	r3, [pc, #132]	; (8003558 <HAL_RCC_ClockConfig+0x254>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d001      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e034      	b.n	800354e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d008      	beq.n	8003502 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034f0:	4b1a      	ldr	r3, [pc, #104]	; (800355c <HAL_RCC_ClockConfig+0x258>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	4917      	ldr	r1, [pc, #92]	; (800355c <HAL_RCC_ClockConfig+0x258>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b00      	cmp	r3, #0
 800350c:	d009      	beq.n	8003522 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800350e:	4b13      	ldr	r3, [pc, #76]	; (800355c <HAL_RCC_ClockConfig+0x258>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	490f      	ldr	r1, [pc, #60]	; (800355c <HAL_RCC_ClockConfig+0x258>)
 800351e:	4313      	orrs	r3, r2
 8003520:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003522:	f000 f823 	bl	800356c <HAL_RCC_GetSysClockFreq>
 8003526:	4601      	mov	r1, r0
 8003528:	4b0c      	ldr	r3, [pc, #48]	; (800355c <HAL_RCC_ClockConfig+0x258>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	091b      	lsrs	r3, r3, #4
 800352e:	f003 030f 	and.w	r3, r3, #15
 8003532:	4a0b      	ldr	r2, [pc, #44]	; (8003560 <HAL_RCC_ClockConfig+0x25c>)
 8003534:	5cd3      	ldrb	r3, [r2, r3]
 8003536:	fa21 f303 	lsr.w	r3, r1, r3
 800353a:	4a0a      	ldr	r2, [pc, #40]	; (8003564 <HAL_RCC_ClockConfig+0x260>)
 800353c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800353e:	4b0a      	ldr	r3, [pc, #40]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7fd ffdc 	bl	8001500 <HAL_InitTick>
 8003548:	4603      	mov	r3, r0
 800354a:	72fb      	strb	r3, [r7, #11]

  return status;
 800354c:	7afb      	ldrb	r3, [r7, #11]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40023c00 	.word	0x40023c00
 800355c:	40023800 	.word	0x40023800
 8003560:	080045c0 	.word	0x080045c0
 8003564:	20000000 	.word	0x20000000
 8003568:	20000004 	.word	0x20000004

0800356c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800356c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800356e:	b087      	sub	sp, #28
 8003570:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003572:	4b5f      	ldr	r3, [pc, #380]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f003 030c 	and.w	r3, r3, #12
 800357e:	2b08      	cmp	r3, #8
 8003580:	d007      	beq.n	8003592 <HAL_RCC_GetSysClockFreq+0x26>
 8003582:	2b0c      	cmp	r3, #12
 8003584:	d008      	beq.n	8003598 <HAL_RCC_GetSysClockFreq+0x2c>
 8003586:	2b04      	cmp	r3, #4
 8003588:	f040 809f 	bne.w	80036ca <HAL_RCC_GetSysClockFreq+0x15e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800358c:	4b59      	ldr	r3, [pc, #356]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x188>)
 800358e:	613b      	str	r3, [r7, #16]
      break;
 8003590:	e0a9      	b.n	80036e6 <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003592:	4b59      	ldr	r3, [pc, #356]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x18c>)
 8003594:	613b      	str	r3, [r7, #16]
      break;
 8003596:	e0a6      	b.n	80036e6 <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	0c9b      	lsrs	r3, r3, #18
 800359c:	f003 030f 	and.w	r3, r3, #15
 80035a0:	4a56      	ldr	r2, [pc, #344]	; (80036fc <HAL_RCC_GetSysClockFreq+0x190>)
 80035a2:	5cd3      	ldrb	r3, [r2, r3]
 80035a4:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	0d9b      	lsrs	r3, r3, #22
 80035aa:	f003 0303 	and.w	r3, r3, #3
 80035ae:	3301      	adds	r3, #1
 80035b0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035b2:	4b4f      	ldr	r3, [pc, #316]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d041      	beq.n	8003642 <HAL_RCC_GetSysClockFreq+0xd6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	461d      	mov	r5, r3
 80035c2:	f04f 0600 	mov.w	r6, #0
 80035c6:	4629      	mov	r1, r5
 80035c8:	4632      	mov	r2, r6
 80035ca:	f04f 0300 	mov.w	r3, #0
 80035ce:	f04f 0400 	mov.w	r4, #0
 80035d2:	0154      	lsls	r4, r2, #5
 80035d4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035d8:	014b      	lsls	r3, r1, #5
 80035da:	4619      	mov	r1, r3
 80035dc:	4622      	mov	r2, r4
 80035de:	1b49      	subs	r1, r1, r5
 80035e0:	eb62 0206 	sbc.w	r2, r2, r6
 80035e4:	f04f 0300 	mov.w	r3, #0
 80035e8:	f04f 0400 	mov.w	r4, #0
 80035ec:	0194      	lsls	r4, r2, #6
 80035ee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80035f2:	018b      	lsls	r3, r1, #6
 80035f4:	1a5b      	subs	r3, r3, r1
 80035f6:	eb64 0402 	sbc.w	r4, r4, r2
 80035fa:	f04f 0100 	mov.w	r1, #0
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	00e2      	lsls	r2, r4, #3
 8003604:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003608:	00d9      	lsls	r1, r3, #3
 800360a:	460b      	mov	r3, r1
 800360c:	4614      	mov	r4, r2
 800360e:	195b      	adds	r3, r3, r5
 8003610:	eb44 0406 	adc.w	r4, r4, r6
 8003614:	f04f 0100 	mov.w	r1, #0
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	0262      	lsls	r2, r4, #9
 800361e:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003622:	0259      	lsls	r1, r3, #9
 8003624:	460b      	mov	r3, r1
 8003626:	4614      	mov	r4, r2
 8003628:	4618      	mov	r0, r3
 800362a:	4621      	mov	r1, r4
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f04f 0400 	mov.w	r4, #0
 8003632:	461a      	mov	r2, r3
 8003634:	4623      	mov	r3, r4
 8003636:	f7fd f89d 	bl	8000774 <__aeabi_uldivmod>
 800363a:	4603      	mov	r3, r0
 800363c:	460c      	mov	r4, r1
 800363e:	617b      	str	r3, [r7, #20]
 8003640:	e040      	b.n	80036c4 <HAL_RCC_GetSysClockFreq+0x158>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	461d      	mov	r5, r3
 8003646:	f04f 0600 	mov.w	r6, #0
 800364a:	4629      	mov	r1, r5
 800364c:	4632      	mov	r2, r6
 800364e:	f04f 0300 	mov.w	r3, #0
 8003652:	f04f 0400 	mov.w	r4, #0
 8003656:	0154      	lsls	r4, r2, #5
 8003658:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800365c:	014b      	lsls	r3, r1, #5
 800365e:	4619      	mov	r1, r3
 8003660:	4622      	mov	r2, r4
 8003662:	1b49      	subs	r1, r1, r5
 8003664:	eb62 0206 	sbc.w	r2, r2, r6
 8003668:	f04f 0300 	mov.w	r3, #0
 800366c:	f04f 0400 	mov.w	r4, #0
 8003670:	0194      	lsls	r4, r2, #6
 8003672:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003676:	018b      	lsls	r3, r1, #6
 8003678:	1a5b      	subs	r3, r3, r1
 800367a:	eb64 0402 	sbc.w	r4, r4, r2
 800367e:	f04f 0100 	mov.w	r1, #0
 8003682:	f04f 0200 	mov.w	r2, #0
 8003686:	00e2      	lsls	r2, r4, #3
 8003688:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800368c:	00d9      	lsls	r1, r3, #3
 800368e:	460b      	mov	r3, r1
 8003690:	4614      	mov	r4, r2
 8003692:	195b      	adds	r3, r3, r5
 8003694:	eb44 0406 	adc.w	r4, r4, r6
 8003698:	f04f 0100 	mov.w	r1, #0
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	02a2      	lsls	r2, r4, #10
 80036a2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80036a6:	0299      	lsls	r1, r3, #10
 80036a8:	460b      	mov	r3, r1
 80036aa:	4614      	mov	r4, r2
 80036ac:	4618      	mov	r0, r3
 80036ae:	4621      	mov	r1, r4
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f04f 0400 	mov.w	r4, #0
 80036b6:	461a      	mov	r2, r3
 80036b8:	4623      	mov	r3, r4
 80036ba:	f7fd f85b 	bl	8000774 <__aeabi_uldivmod>
 80036be:	4603      	mov	r3, r0
 80036c0:	460c      	mov	r4, r1
 80036c2:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	613b      	str	r3, [r7, #16]
      break;
 80036c8:	e00d      	b.n	80036e6 <HAL_RCC_GetSysClockFreq+0x17a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80036ca:	4b09      	ldr	r3, [pc, #36]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	0b5b      	lsrs	r3, r3, #13
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	3301      	adds	r3, #1
 80036da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	613b      	str	r3, [r7, #16]
      break;
 80036e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036e6:	693b      	ldr	r3, [r7, #16]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	371c      	adds	r7, #28
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036f0:	40023800 	.word	0x40023800
 80036f4:	00f42400 	.word	0x00f42400
 80036f8:	007a1200 	.word	0x007a1200
 80036fc:	080045b4 	.word	0x080045b4

08003700 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003704:	4b02      	ldr	r3, [pc, #8]	; (8003710 <HAL_RCC_GetHCLKFreq+0x10>)
 8003706:	681b      	ldr	r3, [r3, #0]
}
 8003708:	4618      	mov	r0, r3
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr
 8003710:	20000000 	.word	0x20000000

08003714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003718:	f7ff fff2 	bl	8003700 <HAL_RCC_GetHCLKFreq>
 800371c:	4601      	mov	r1, r0
 800371e:	4b05      	ldr	r3, [pc, #20]	; (8003734 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	0a1b      	lsrs	r3, r3, #8
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	4a03      	ldr	r2, [pc, #12]	; (8003738 <HAL_RCC_GetPCLK1Freq+0x24>)
 800372a:	5cd3      	ldrb	r3, [r2, r3]
 800372c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003730:	4618      	mov	r0, r3
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40023800 	.word	0x40023800
 8003738:	080045d0 	.word	0x080045d0

0800373c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003740:	f7ff ffde 	bl	8003700 <HAL_RCC_GetHCLKFreq>
 8003744:	4601      	mov	r1, r0
 8003746:	4b05      	ldr	r3, [pc, #20]	; (800375c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	0adb      	lsrs	r3, r3, #11
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	4a03      	ldr	r2, [pc, #12]	; (8003760 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003752:	5cd3      	ldrb	r3, [r2, r3]
 8003754:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003758:	4618      	mov	r0, r3
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40023800 	.word	0x40023800
 8003760:	080045d0 	.word	0x080045d0

08003764 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003764:	b480      	push	{r7}
 8003766:	b087      	sub	sp, #28
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800376c:	2300      	movs	r3, #0
 800376e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003770:	4b29      	ldr	r3, [pc, #164]	; (8003818 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d12c      	bne.n	80037d6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800377c:	4b26      	ldr	r3, [pc, #152]	; (8003818 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d005      	beq.n	8003794 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003788:	4b24      	ldr	r3, [pc, #144]	; (800381c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003790:	617b      	str	r3, [r7, #20]
 8003792:	e016      	b.n	80037c2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003794:	4b20      	ldr	r3, [pc, #128]	; (8003818 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	4a1f      	ldr	r2, [pc, #124]	; (8003818 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800379a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800379e:	6253      	str	r3, [r2, #36]	; 0x24
 80037a0:	4b1d      	ldr	r3, [pc, #116]	; (8003818 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80037ac:	4b1b      	ldr	r3, [pc, #108]	; (800381c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80037b4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b6:	4b18      	ldr	r3, [pc, #96]	; (8003818 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	4a17      	ldr	r2, [pc, #92]	; (8003818 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037c0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80037c8:	d105      	bne.n	80037d6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80037d0:	d101      	bne.n	80037d6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80037d2:	2301      	movs	r3, #1
 80037d4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d105      	bne.n	80037e8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80037dc:	4b10      	ldr	r3, [pc, #64]	; (8003820 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a0f      	ldr	r2, [pc, #60]	; (8003820 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037e2:	f043 0304 	orr.w	r3, r3, #4
 80037e6:	6013      	str	r3, [r2, #0]
 80037e8:	4b0d      	ldr	r3, [pc, #52]	; (8003820 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f023 0201 	bic.w	r2, r3, #1
 80037f0:	490b      	ldr	r1, [pc, #44]	; (8003820 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80037f8:	4b09      	ldr	r3, [pc, #36]	; (8003820 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	429a      	cmp	r2, r3
 8003804:	d001      	beq.n	800380a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e000      	b.n	800380c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	371c      	adds	r7, #28
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40023800 	.word	0x40023800
 800381c:	40007000 	.word	0x40007000
 8003820:	40023c00 	.word	0x40023c00

08003824 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e03f      	b.n	80038b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d106      	bne.n	8003850 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7fd fdfc 	bl	8001448 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2224      	movs	r2, #36	; 0x24
 8003854:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68da      	ldr	r2, [r3, #12]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003866:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f90b 	bl	8003a84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	691a      	ldr	r2, [r3, #16]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800387c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695a      	ldr	r2, [r3, #20]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800388c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800389c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b088      	sub	sp, #32
 80038c2:	af02      	add	r7, sp, #8
 80038c4:	60f8      	str	r0, [r7, #12]
 80038c6:	60b9      	str	r1, [r7, #8]
 80038c8:	603b      	str	r3, [r7, #0]
 80038ca:	4613      	mov	r3, r2
 80038cc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b20      	cmp	r3, #32
 80038dc:	f040 8083 	bne.w	80039e6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <HAL_UART_Transmit+0x2e>
 80038e6:	88fb      	ldrh	r3, [r7, #6]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e07b      	b.n	80039e8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d101      	bne.n	80038fe <HAL_UART_Transmit+0x40>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e074      	b.n	80039e8 <HAL_UART_Transmit+0x12a>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2221      	movs	r2, #33	; 0x21
 8003910:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003914:	f7fd fe40 	bl	8001598 <HAL_GetTick>
 8003918:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	88fa      	ldrh	r2, [r7, #6]
 800391e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	88fa      	ldrh	r2, [r7, #6]
 8003924:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800392e:	e042      	b.n	80039b6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003934:	b29b      	uxth	r3, r3
 8003936:	3b01      	subs	r3, #1
 8003938:	b29a      	uxth	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003946:	d122      	bne.n	800398e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	2200      	movs	r2, #0
 8003950:	2180      	movs	r1, #128	; 0x80
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 f84c 	bl	80039f0 <UART_WaitOnFlagUntilTimeout>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e042      	b.n	80039e8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003974:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d103      	bne.n	8003986 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	3302      	adds	r3, #2
 8003982:	60bb      	str	r3, [r7, #8]
 8003984:	e017      	b.n	80039b6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	3301      	adds	r3, #1
 800398a:	60bb      	str	r3, [r7, #8]
 800398c:	e013      	b.n	80039b6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2200      	movs	r2, #0
 8003996:	2180      	movs	r1, #128	; 0x80
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 f829 	bl	80039f0 <UART_WaitOnFlagUntilTimeout>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e01f      	b.n	80039e8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	60ba      	str	r2, [r7, #8]
 80039ae:	781a      	ldrb	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1b7      	bne.n	8003930 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	2200      	movs	r2, #0
 80039c8:	2140      	movs	r1, #64	; 0x40
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f000 f810 	bl	80039f0 <UART_WaitOnFlagUntilTimeout>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e006      	b.n	80039e8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2220      	movs	r2, #32
 80039de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80039e2:	2300      	movs	r3, #0
 80039e4:	e000      	b.n	80039e8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80039e6:	2302      	movs	r3, #2
  }
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	603b      	str	r3, [r7, #0]
 80039fc:	4613      	mov	r3, r2
 80039fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a00:	e02c      	b.n	8003a5c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a08:	d028      	beq.n	8003a5c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d007      	beq.n	8003a20 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a10:	f7fd fdc2 	bl	8001598 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d21d      	bcs.n	8003a5c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68da      	ldr	r2, [r3, #12]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a2e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	695a      	ldr	r2, [r3, #20]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0201 	bic.w	r2, r2, #1
 8003a3e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e00f      	b.n	8003a7c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	4013      	ands	r3, r2
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	bf0c      	ite	eq
 8003a6c:	2301      	moveq	r3, #1
 8003a6e:	2300      	movne	r3, #0
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	461a      	mov	r2, r3
 8003a74:	79fb      	ldrb	r3, [r7, #7]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d0c3      	beq.n	8003a02 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003ac4:	f023 030c 	bic.w	r3, r3, #12
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6812      	ldr	r2, [r2, #0]
 8003acc:	68b9      	ldr	r1, [r7, #8]
 8003ace:	430b      	orrs	r3, r1
 8003ad0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	699a      	ldr	r2, [r3, #24]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a55      	ldr	r2, [pc, #340]	; (8003c44 <UART_SetConfig+0x1c0>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d103      	bne.n	8003afa <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003af2:	f7ff fe23 	bl	800373c <HAL_RCC_GetPCLK2Freq>
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	e002      	b.n	8003b00 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003afa:	f7ff fe0b 	bl	8003714 <HAL_RCC_GetPCLK1Freq>
 8003afe:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b08:	d14c      	bne.n	8003ba4 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	009a      	lsls	r2, r3, #2
 8003b14:	441a      	add	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b20:	4a49      	ldr	r2, [pc, #292]	; (8003c48 <UART_SetConfig+0x1c4>)
 8003b22:	fba2 2303 	umull	r2, r3, r2, r3
 8003b26:	095b      	lsrs	r3, r3, #5
 8003b28:	0119      	lsls	r1, r3, #4
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	009a      	lsls	r2, r3, #2
 8003b34:	441a      	add	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b40:	4b41      	ldr	r3, [pc, #260]	; (8003c48 <UART_SetConfig+0x1c4>)
 8003b42:	fba3 0302 	umull	r0, r3, r3, r2
 8003b46:	095b      	lsrs	r3, r3, #5
 8003b48:	2064      	movs	r0, #100	; 0x64
 8003b4a:	fb00 f303 	mul.w	r3, r0, r3
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	3332      	adds	r3, #50	; 0x32
 8003b54:	4a3c      	ldr	r2, [pc, #240]	; (8003c48 <UART_SetConfig+0x1c4>)
 8003b56:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5a:	095b      	lsrs	r3, r3, #5
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b62:	4419      	add	r1, r3
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	4613      	mov	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	009a      	lsls	r2, r3, #2
 8003b6e:	441a      	add	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b7a:	4b33      	ldr	r3, [pc, #204]	; (8003c48 <UART_SetConfig+0x1c4>)
 8003b7c:	fba3 0302 	umull	r0, r3, r3, r2
 8003b80:	095b      	lsrs	r3, r3, #5
 8003b82:	2064      	movs	r0, #100	; 0x64
 8003b84:	fb00 f303 	mul.w	r3, r0, r3
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	3332      	adds	r3, #50	; 0x32
 8003b8e:	4a2e      	ldr	r2, [pc, #184]	; (8003c48 <UART_SetConfig+0x1c4>)
 8003b90:	fba2 2303 	umull	r2, r3, r2, r3
 8003b94:	095b      	lsrs	r3, r3, #5
 8003b96:	f003 0207 	and.w	r2, r3, #7
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	440a      	add	r2, r1
 8003ba0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ba2:	e04a      	b.n	8003c3a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4413      	add	r3, r2
 8003bac:	009a      	lsls	r2, r3, #2
 8003bae:	441a      	add	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bba:	4a23      	ldr	r2, [pc, #140]	; (8003c48 <UART_SetConfig+0x1c4>)
 8003bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc0:	095b      	lsrs	r3, r3, #5
 8003bc2:	0119      	lsls	r1, r3, #4
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4413      	add	r3, r2
 8003bcc:	009a      	lsls	r2, r3, #2
 8003bce:	441a      	add	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bda:	4b1b      	ldr	r3, [pc, #108]	; (8003c48 <UART_SetConfig+0x1c4>)
 8003bdc:	fba3 0302 	umull	r0, r3, r3, r2
 8003be0:	095b      	lsrs	r3, r3, #5
 8003be2:	2064      	movs	r0, #100	; 0x64
 8003be4:	fb00 f303 	mul.w	r3, r0, r3
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	011b      	lsls	r3, r3, #4
 8003bec:	3332      	adds	r3, #50	; 0x32
 8003bee:	4a16      	ldr	r2, [pc, #88]	; (8003c48 <UART_SetConfig+0x1c4>)
 8003bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf4:	095b      	lsrs	r3, r3, #5
 8003bf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bfa:	4419      	add	r1, r3
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4413      	add	r3, r2
 8003c04:	009a      	lsls	r2, r3, #2
 8003c06:	441a      	add	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c12:	4b0d      	ldr	r3, [pc, #52]	; (8003c48 <UART_SetConfig+0x1c4>)
 8003c14:	fba3 0302 	umull	r0, r3, r3, r2
 8003c18:	095b      	lsrs	r3, r3, #5
 8003c1a:	2064      	movs	r0, #100	; 0x64
 8003c1c:	fb00 f303 	mul.w	r3, r0, r3
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	3332      	adds	r3, #50	; 0x32
 8003c26:	4a08      	ldr	r2, [pc, #32]	; (8003c48 <UART_SetConfig+0x1c4>)
 8003c28:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2c:	095b      	lsrs	r3, r3, #5
 8003c2e:	f003 020f 	and.w	r2, r3, #15
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	440a      	add	r2, r1
 8003c38:	609a      	str	r2, [r3, #8]
}
 8003c3a:	bf00      	nop
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40013800 	.word	0x40013800
 8003c48:	51eb851f 	.word	0x51eb851f

08003c4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003c4c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003c4e:	e003      	b.n	8003c58 <LoopCopyDataInit>

08003c50 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003c52:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003c54:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003c56:	3104      	adds	r1, #4

08003c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003c58:	480a      	ldr	r0, [pc, #40]	; (8003c84 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003c5a:	4b0b      	ldr	r3, [pc, #44]	; (8003c88 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003c5c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003c5e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003c60:	d3f6      	bcc.n	8003c50 <CopyDataInit>
  ldr r2, =_sbss
 8003c62:	4a0a      	ldr	r2, [pc, #40]	; (8003c8c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003c64:	e002      	b.n	8003c6c <LoopFillZerobss>

08003c66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003c66:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003c68:	f842 3b04 	str.w	r3, [r2], #4

08003c6c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003c6c:	4b08      	ldr	r3, [pc, #32]	; (8003c90 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003c6e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003c70:	d3f9      	bcc.n	8003c66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003c72:	f7fd fbb3 	bl	80013dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c76:	f000 f815 	bl	8003ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003c7a:	f7fd f959 	bl	8000f30 <main>
  bx lr
 8003c7e:	4770      	bx	lr
  ldr r3, =_sidata
 8003c80:	0800461c 	.word	0x0800461c
  ldr r0, =_sdata
 8003c84:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003c88:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8003c8c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8003c90:	20000138 	.word	0x20000138

08003c94 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003c94:	e7fe      	b.n	8003c94 <ADC1_IRQHandler>
	...

08003c98 <__errno>:
 8003c98:	4b01      	ldr	r3, [pc, #4]	; (8003ca0 <__errno+0x8>)
 8003c9a:	6818      	ldr	r0, [r3, #0]
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	2000000c 	.word	0x2000000c

08003ca4 <__libc_init_array>:
 8003ca4:	b570      	push	{r4, r5, r6, lr}
 8003ca6:	2500      	movs	r5, #0
 8003ca8:	4e0c      	ldr	r6, [pc, #48]	; (8003cdc <__libc_init_array+0x38>)
 8003caa:	4c0d      	ldr	r4, [pc, #52]	; (8003ce0 <__libc_init_array+0x3c>)
 8003cac:	1ba4      	subs	r4, r4, r6
 8003cae:	10a4      	asrs	r4, r4, #2
 8003cb0:	42a5      	cmp	r5, r4
 8003cb2:	d109      	bne.n	8003cc8 <__libc_init_array+0x24>
 8003cb4:	f000 fc3c 	bl	8004530 <_init>
 8003cb8:	2500      	movs	r5, #0
 8003cba:	4e0a      	ldr	r6, [pc, #40]	; (8003ce4 <__libc_init_array+0x40>)
 8003cbc:	4c0a      	ldr	r4, [pc, #40]	; (8003ce8 <__libc_init_array+0x44>)
 8003cbe:	1ba4      	subs	r4, r4, r6
 8003cc0:	10a4      	asrs	r4, r4, #2
 8003cc2:	42a5      	cmp	r5, r4
 8003cc4:	d105      	bne.n	8003cd2 <__libc_init_array+0x2e>
 8003cc6:	bd70      	pop	{r4, r5, r6, pc}
 8003cc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ccc:	4798      	blx	r3
 8003cce:	3501      	adds	r5, #1
 8003cd0:	e7ee      	b.n	8003cb0 <__libc_init_array+0xc>
 8003cd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cd6:	4798      	blx	r3
 8003cd8:	3501      	adds	r5, #1
 8003cda:	e7f2      	b.n	8003cc2 <__libc_init_array+0x1e>
 8003cdc:	08004614 	.word	0x08004614
 8003ce0:	08004614 	.word	0x08004614
 8003ce4:	08004614 	.word	0x08004614
 8003ce8:	08004618 	.word	0x08004618

08003cec <memset>:
 8003cec:	4603      	mov	r3, r0
 8003cee:	4402      	add	r2, r0
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d100      	bne.n	8003cf6 <memset+0xa>
 8003cf4:	4770      	bx	lr
 8003cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8003cfa:	e7f9      	b.n	8003cf0 <memset+0x4>

08003cfc <siprintf>:
 8003cfc:	b40e      	push	{r1, r2, r3}
 8003cfe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d02:	b500      	push	{lr}
 8003d04:	b09c      	sub	sp, #112	; 0x70
 8003d06:	ab1d      	add	r3, sp, #116	; 0x74
 8003d08:	9002      	str	r0, [sp, #8]
 8003d0a:	9006      	str	r0, [sp, #24]
 8003d0c:	9107      	str	r1, [sp, #28]
 8003d0e:	9104      	str	r1, [sp, #16]
 8003d10:	4808      	ldr	r0, [pc, #32]	; (8003d34 <siprintf+0x38>)
 8003d12:	4909      	ldr	r1, [pc, #36]	; (8003d38 <siprintf+0x3c>)
 8003d14:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d18:	9105      	str	r1, [sp, #20]
 8003d1a:	6800      	ldr	r0, [r0, #0]
 8003d1c:	a902      	add	r1, sp, #8
 8003d1e:	9301      	str	r3, [sp, #4]
 8003d20:	f000 f86e 	bl	8003e00 <_svfiprintf_r>
 8003d24:	2200      	movs	r2, #0
 8003d26:	9b02      	ldr	r3, [sp, #8]
 8003d28:	701a      	strb	r2, [r3, #0]
 8003d2a:	b01c      	add	sp, #112	; 0x70
 8003d2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d30:	b003      	add	sp, #12
 8003d32:	4770      	bx	lr
 8003d34:	2000000c 	.word	0x2000000c
 8003d38:	ffff0208 	.word	0xffff0208

08003d3c <strcpy>:
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d42:	f803 2b01 	strb.w	r2, [r3], #1
 8003d46:	2a00      	cmp	r2, #0
 8003d48:	d1f9      	bne.n	8003d3e <strcpy+0x2>
 8003d4a:	4770      	bx	lr

08003d4c <__ssputs_r>:
 8003d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d50:	688e      	ldr	r6, [r1, #8]
 8003d52:	4682      	mov	sl, r0
 8003d54:	429e      	cmp	r6, r3
 8003d56:	460c      	mov	r4, r1
 8003d58:	4690      	mov	r8, r2
 8003d5a:	4699      	mov	r9, r3
 8003d5c:	d837      	bhi.n	8003dce <__ssputs_r+0x82>
 8003d5e:	898a      	ldrh	r2, [r1, #12]
 8003d60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d64:	d031      	beq.n	8003dca <__ssputs_r+0x7e>
 8003d66:	2302      	movs	r3, #2
 8003d68:	6825      	ldr	r5, [r4, #0]
 8003d6a:	6909      	ldr	r1, [r1, #16]
 8003d6c:	1a6f      	subs	r7, r5, r1
 8003d6e:	6965      	ldr	r5, [r4, #20]
 8003d70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d74:	fb95 f5f3 	sdiv	r5, r5, r3
 8003d78:	f109 0301 	add.w	r3, r9, #1
 8003d7c:	443b      	add	r3, r7
 8003d7e:	429d      	cmp	r5, r3
 8003d80:	bf38      	it	cc
 8003d82:	461d      	movcc	r5, r3
 8003d84:	0553      	lsls	r3, r2, #21
 8003d86:	d530      	bpl.n	8003dea <__ssputs_r+0x9e>
 8003d88:	4629      	mov	r1, r5
 8003d8a:	f000 fb37 	bl	80043fc <_malloc_r>
 8003d8e:	4606      	mov	r6, r0
 8003d90:	b950      	cbnz	r0, 8003da8 <__ssputs_r+0x5c>
 8003d92:	230c      	movs	r3, #12
 8003d94:	f04f 30ff 	mov.w	r0, #4294967295
 8003d98:	f8ca 3000 	str.w	r3, [sl]
 8003d9c:	89a3      	ldrh	r3, [r4, #12]
 8003d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003da2:	81a3      	strh	r3, [r4, #12]
 8003da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003da8:	463a      	mov	r2, r7
 8003daa:	6921      	ldr	r1, [r4, #16]
 8003dac:	f000 fab6 	bl	800431c <memcpy>
 8003db0:	89a3      	ldrh	r3, [r4, #12]
 8003db2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dba:	81a3      	strh	r3, [r4, #12]
 8003dbc:	6126      	str	r6, [r4, #16]
 8003dbe:	443e      	add	r6, r7
 8003dc0:	6026      	str	r6, [r4, #0]
 8003dc2:	464e      	mov	r6, r9
 8003dc4:	6165      	str	r5, [r4, #20]
 8003dc6:	1bed      	subs	r5, r5, r7
 8003dc8:	60a5      	str	r5, [r4, #8]
 8003dca:	454e      	cmp	r6, r9
 8003dcc:	d900      	bls.n	8003dd0 <__ssputs_r+0x84>
 8003dce:	464e      	mov	r6, r9
 8003dd0:	4632      	mov	r2, r6
 8003dd2:	4641      	mov	r1, r8
 8003dd4:	6820      	ldr	r0, [r4, #0]
 8003dd6:	f000 faac 	bl	8004332 <memmove>
 8003dda:	68a3      	ldr	r3, [r4, #8]
 8003ddc:	2000      	movs	r0, #0
 8003dde:	1b9b      	subs	r3, r3, r6
 8003de0:	60a3      	str	r3, [r4, #8]
 8003de2:	6823      	ldr	r3, [r4, #0]
 8003de4:	441e      	add	r6, r3
 8003de6:	6026      	str	r6, [r4, #0]
 8003de8:	e7dc      	b.n	8003da4 <__ssputs_r+0x58>
 8003dea:	462a      	mov	r2, r5
 8003dec:	f000 fb60 	bl	80044b0 <_realloc_r>
 8003df0:	4606      	mov	r6, r0
 8003df2:	2800      	cmp	r0, #0
 8003df4:	d1e2      	bne.n	8003dbc <__ssputs_r+0x70>
 8003df6:	6921      	ldr	r1, [r4, #16]
 8003df8:	4650      	mov	r0, sl
 8003dfa:	f000 fab3 	bl	8004364 <_free_r>
 8003dfe:	e7c8      	b.n	8003d92 <__ssputs_r+0x46>

08003e00 <_svfiprintf_r>:
 8003e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e04:	461d      	mov	r5, r3
 8003e06:	898b      	ldrh	r3, [r1, #12]
 8003e08:	b09d      	sub	sp, #116	; 0x74
 8003e0a:	061f      	lsls	r7, r3, #24
 8003e0c:	4680      	mov	r8, r0
 8003e0e:	460c      	mov	r4, r1
 8003e10:	4616      	mov	r6, r2
 8003e12:	d50f      	bpl.n	8003e34 <_svfiprintf_r+0x34>
 8003e14:	690b      	ldr	r3, [r1, #16]
 8003e16:	b96b      	cbnz	r3, 8003e34 <_svfiprintf_r+0x34>
 8003e18:	2140      	movs	r1, #64	; 0x40
 8003e1a:	f000 faef 	bl	80043fc <_malloc_r>
 8003e1e:	6020      	str	r0, [r4, #0]
 8003e20:	6120      	str	r0, [r4, #16]
 8003e22:	b928      	cbnz	r0, 8003e30 <_svfiprintf_r+0x30>
 8003e24:	230c      	movs	r3, #12
 8003e26:	f8c8 3000 	str.w	r3, [r8]
 8003e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e2e:	e0c8      	b.n	8003fc2 <_svfiprintf_r+0x1c2>
 8003e30:	2340      	movs	r3, #64	; 0x40
 8003e32:	6163      	str	r3, [r4, #20]
 8003e34:	2300      	movs	r3, #0
 8003e36:	9309      	str	r3, [sp, #36]	; 0x24
 8003e38:	2320      	movs	r3, #32
 8003e3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e3e:	2330      	movs	r3, #48	; 0x30
 8003e40:	f04f 0b01 	mov.w	fp, #1
 8003e44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e48:	9503      	str	r5, [sp, #12]
 8003e4a:	4637      	mov	r7, r6
 8003e4c:	463d      	mov	r5, r7
 8003e4e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003e52:	b10b      	cbz	r3, 8003e58 <_svfiprintf_r+0x58>
 8003e54:	2b25      	cmp	r3, #37	; 0x25
 8003e56:	d13e      	bne.n	8003ed6 <_svfiprintf_r+0xd6>
 8003e58:	ebb7 0a06 	subs.w	sl, r7, r6
 8003e5c:	d00b      	beq.n	8003e76 <_svfiprintf_r+0x76>
 8003e5e:	4653      	mov	r3, sl
 8003e60:	4632      	mov	r2, r6
 8003e62:	4621      	mov	r1, r4
 8003e64:	4640      	mov	r0, r8
 8003e66:	f7ff ff71 	bl	8003d4c <__ssputs_r>
 8003e6a:	3001      	adds	r0, #1
 8003e6c:	f000 80a4 	beq.w	8003fb8 <_svfiprintf_r+0x1b8>
 8003e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e72:	4453      	add	r3, sl
 8003e74:	9309      	str	r3, [sp, #36]	; 0x24
 8003e76:	783b      	ldrb	r3, [r7, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 809d 	beq.w	8003fb8 <_svfiprintf_r+0x1b8>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	f04f 32ff 	mov.w	r2, #4294967295
 8003e84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e88:	9304      	str	r3, [sp, #16]
 8003e8a:	9307      	str	r3, [sp, #28]
 8003e8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e90:	931a      	str	r3, [sp, #104]	; 0x68
 8003e92:	462f      	mov	r7, r5
 8003e94:	2205      	movs	r2, #5
 8003e96:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003e9a:	4850      	ldr	r0, [pc, #320]	; (8003fdc <_svfiprintf_r+0x1dc>)
 8003e9c:	f000 fa30 	bl	8004300 <memchr>
 8003ea0:	9b04      	ldr	r3, [sp, #16]
 8003ea2:	b9d0      	cbnz	r0, 8003eda <_svfiprintf_r+0xda>
 8003ea4:	06d9      	lsls	r1, r3, #27
 8003ea6:	bf44      	itt	mi
 8003ea8:	2220      	movmi	r2, #32
 8003eaa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003eae:	071a      	lsls	r2, r3, #28
 8003eb0:	bf44      	itt	mi
 8003eb2:	222b      	movmi	r2, #43	; 0x2b
 8003eb4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003eb8:	782a      	ldrb	r2, [r5, #0]
 8003eba:	2a2a      	cmp	r2, #42	; 0x2a
 8003ebc:	d015      	beq.n	8003eea <_svfiprintf_r+0xea>
 8003ebe:	462f      	mov	r7, r5
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	250a      	movs	r5, #10
 8003ec4:	9a07      	ldr	r2, [sp, #28]
 8003ec6:	4639      	mov	r1, r7
 8003ec8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ecc:	3b30      	subs	r3, #48	; 0x30
 8003ece:	2b09      	cmp	r3, #9
 8003ed0:	d94d      	bls.n	8003f6e <_svfiprintf_r+0x16e>
 8003ed2:	b1b8      	cbz	r0, 8003f04 <_svfiprintf_r+0x104>
 8003ed4:	e00f      	b.n	8003ef6 <_svfiprintf_r+0xf6>
 8003ed6:	462f      	mov	r7, r5
 8003ed8:	e7b8      	b.n	8003e4c <_svfiprintf_r+0x4c>
 8003eda:	4a40      	ldr	r2, [pc, #256]	; (8003fdc <_svfiprintf_r+0x1dc>)
 8003edc:	463d      	mov	r5, r7
 8003ede:	1a80      	subs	r0, r0, r2
 8003ee0:	fa0b f000 	lsl.w	r0, fp, r0
 8003ee4:	4318      	orrs	r0, r3
 8003ee6:	9004      	str	r0, [sp, #16]
 8003ee8:	e7d3      	b.n	8003e92 <_svfiprintf_r+0x92>
 8003eea:	9a03      	ldr	r2, [sp, #12]
 8003eec:	1d11      	adds	r1, r2, #4
 8003eee:	6812      	ldr	r2, [r2, #0]
 8003ef0:	9103      	str	r1, [sp, #12]
 8003ef2:	2a00      	cmp	r2, #0
 8003ef4:	db01      	blt.n	8003efa <_svfiprintf_r+0xfa>
 8003ef6:	9207      	str	r2, [sp, #28]
 8003ef8:	e004      	b.n	8003f04 <_svfiprintf_r+0x104>
 8003efa:	4252      	negs	r2, r2
 8003efc:	f043 0302 	orr.w	r3, r3, #2
 8003f00:	9207      	str	r2, [sp, #28]
 8003f02:	9304      	str	r3, [sp, #16]
 8003f04:	783b      	ldrb	r3, [r7, #0]
 8003f06:	2b2e      	cmp	r3, #46	; 0x2e
 8003f08:	d10c      	bne.n	8003f24 <_svfiprintf_r+0x124>
 8003f0a:	787b      	ldrb	r3, [r7, #1]
 8003f0c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f0e:	d133      	bne.n	8003f78 <_svfiprintf_r+0x178>
 8003f10:	9b03      	ldr	r3, [sp, #12]
 8003f12:	3702      	adds	r7, #2
 8003f14:	1d1a      	adds	r2, r3, #4
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	9203      	str	r2, [sp, #12]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	bfb8      	it	lt
 8003f1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f22:	9305      	str	r3, [sp, #20]
 8003f24:	4d2e      	ldr	r5, [pc, #184]	; (8003fe0 <_svfiprintf_r+0x1e0>)
 8003f26:	2203      	movs	r2, #3
 8003f28:	7839      	ldrb	r1, [r7, #0]
 8003f2a:	4628      	mov	r0, r5
 8003f2c:	f000 f9e8 	bl	8004300 <memchr>
 8003f30:	b138      	cbz	r0, 8003f42 <_svfiprintf_r+0x142>
 8003f32:	2340      	movs	r3, #64	; 0x40
 8003f34:	1b40      	subs	r0, r0, r5
 8003f36:	fa03 f000 	lsl.w	r0, r3, r0
 8003f3a:	9b04      	ldr	r3, [sp, #16]
 8003f3c:	3701      	adds	r7, #1
 8003f3e:	4303      	orrs	r3, r0
 8003f40:	9304      	str	r3, [sp, #16]
 8003f42:	7839      	ldrb	r1, [r7, #0]
 8003f44:	2206      	movs	r2, #6
 8003f46:	4827      	ldr	r0, [pc, #156]	; (8003fe4 <_svfiprintf_r+0x1e4>)
 8003f48:	1c7e      	adds	r6, r7, #1
 8003f4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f4e:	f000 f9d7 	bl	8004300 <memchr>
 8003f52:	2800      	cmp	r0, #0
 8003f54:	d038      	beq.n	8003fc8 <_svfiprintf_r+0x1c8>
 8003f56:	4b24      	ldr	r3, [pc, #144]	; (8003fe8 <_svfiprintf_r+0x1e8>)
 8003f58:	bb13      	cbnz	r3, 8003fa0 <_svfiprintf_r+0x1a0>
 8003f5a:	9b03      	ldr	r3, [sp, #12]
 8003f5c:	3307      	adds	r3, #7
 8003f5e:	f023 0307 	bic.w	r3, r3, #7
 8003f62:	3308      	adds	r3, #8
 8003f64:	9303      	str	r3, [sp, #12]
 8003f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f68:	444b      	add	r3, r9
 8003f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8003f6c:	e76d      	b.n	8003e4a <_svfiprintf_r+0x4a>
 8003f6e:	fb05 3202 	mla	r2, r5, r2, r3
 8003f72:	2001      	movs	r0, #1
 8003f74:	460f      	mov	r7, r1
 8003f76:	e7a6      	b.n	8003ec6 <_svfiprintf_r+0xc6>
 8003f78:	2300      	movs	r3, #0
 8003f7a:	250a      	movs	r5, #10
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	3701      	adds	r7, #1
 8003f80:	9305      	str	r3, [sp, #20]
 8003f82:	4638      	mov	r0, r7
 8003f84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f88:	3a30      	subs	r2, #48	; 0x30
 8003f8a:	2a09      	cmp	r2, #9
 8003f8c:	d903      	bls.n	8003f96 <_svfiprintf_r+0x196>
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d0c8      	beq.n	8003f24 <_svfiprintf_r+0x124>
 8003f92:	9105      	str	r1, [sp, #20]
 8003f94:	e7c6      	b.n	8003f24 <_svfiprintf_r+0x124>
 8003f96:	fb05 2101 	mla	r1, r5, r1, r2
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	4607      	mov	r7, r0
 8003f9e:	e7f0      	b.n	8003f82 <_svfiprintf_r+0x182>
 8003fa0:	ab03      	add	r3, sp, #12
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	4622      	mov	r2, r4
 8003fa6:	4b11      	ldr	r3, [pc, #68]	; (8003fec <_svfiprintf_r+0x1ec>)
 8003fa8:	a904      	add	r1, sp, #16
 8003faa:	4640      	mov	r0, r8
 8003fac:	f3af 8000 	nop.w
 8003fb0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003fb4:	4681      	mov	r9, r0
 8003fb6:	d1d6      	bne.n	8003f66 <_svfiprintf_r+0x166>
 8003fb8:	89a3      	ldrh	r3, [r4, #12]
 8003fba:	065b      	lsls	r3, r3, #25
 8003fbc:	f53f af35 	bmi.w	8003e2a <_svfiprintf_r+0x2a>
 8003fc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fc2:	b01d      	add	sp, #116	; 0x74
 8003fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fc8:	ab03      	add	r3, sp, #12
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	4622      	mov	r2, r4
 8003fce:	4b07      	ldr	r3, [pc, #28]	; (8003fec <_svfiprintf_r+0x1ec>)
 8003fd0:	a904      	add	r1, sp, #16
 8003fd2:	4640      	mov	r0, r8
 8003fd4:	f000 f882 	bl	80040dc <_printf_i>
 8003fd8:	e7ea      	b.n	8003fb0 <_svfiprintf_r+0x1b0>
 8003fda:	bf00      	nop
 8003fdc:	080045d8 	.word	0x080045d8
 8003fe0:	080045de 	.word	0x080045de
 8003fe4:	080045e2 	.word	0x080045e2
 8003fe8:	00000000 	.word	0x00000000
 8003fec:	08003d4d 	.word	0x08003d4d

08003ff0 <_printf_common>:
 8003ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ff4:	4691      	mov	r9, r2
 8003ff6:	461f      	mov	r7, r3
 8003ff8:	688a      	ldr	r2, [r1, #8]
 8003ffa:	690b      	ldr	r3, [r1, #16]
 8003ffc:	4606      	mov	r6, r0
 8003ffe:	4293      	cmp	r3, r2
 8004000:	bfb8      	it	lt
 8004002:	4613      	movlt	r3, r2
 8004004:	f8c9 3000 	str.w	r3, [r9]
 8004008:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800400c:	460c      	mov	r4, r1
 800400e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004012:	b112      	cbz	r2, 800401a <_printf_common+0x2a>
 8004014:	3301      	adds	r3, #1
 8004016:	f8c9 3000 	str.w	r3, [r9]
 800401a:	6823      	ldr	r3, [r4, #0]
 800401c:	0699      	lsls	r1, r3, #26
 800401e:	bf42      	ittt	mi
 8004020:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004024:	3302      	addmi	r3, #2
 8004026:	f8c9 3000 	strmi.w	r3, [r9]
 800402a:	6825      	ldr	r5, [r4, #0]
 800402c:	f015 0506 	ands.w	r5, r5, #6
 8004030:	d107      	bne.n	8004042 <_printf_common+0x52>
 8004032:	f104 0a19 	add.w	sl, r4, #25
 8004036:	68e3      	ldr	r3, [r4, #12]
 8004038:	f8d9 2000 	ldr.w	r2, [r9]
 800403c:	1a9b      	subs	r3, r3, r2
 800403e:	42ab      	cmp	r3, r5
 8004040:	dc29      	bgt.n	8004096 <_printf_common+0xa6>
 8004042:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004046:	6822      	ldr	r2, [r4, #0]
 8004048:	3300      	adds	r3, #0
 800404a:	bf18      	it	ne
 800404c:	2301      	movne	r3, #1
 800404e:	0692      	lsls	r2, r2, #26
 8004050:	d42e      	bmi.n	80040b0 <_printf_common+0xc0>
 8004052:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004056:	4639      	mov	r1, r7
 8004058:	4630      	mov	r0, r6
 800405a:	47c0      	blx	r8
 800405c:	3001      	adds	r0, #1
 800405e:	d021      	beq.n	80040a4 <_printf_common+0xb4>
 8004060:	6823      	ldr	r3, [r4, #0]
 8004062:	68e5      	ldr	r5, [r4, #12]
 8004064:	f003 0306 	and.w	r3, r3, #6
 8004068:	2b04      	cmp	r3, #4
 800406a:	bf18      	it	ne
 800406c:	2500      	movne	r5, #0
 800406e:	f8d9 2000 	ldr.w	r2, [r9]
 8004072:	f04f 0900 	mov.w	r9, #0
 8004076:	bf08      	it	eq
 8004078:	1aad      	subeq	r5, r5, r2
 800407a:	68a3      	ldr	r3, [r4, #8]
 800407c:	6922      	ldr	r2, [r4, #16]
 800407e:	bf08      	it	eq
 8004080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004084:	4293      	cmp	r3, r2
 8004086:	bfc4      	itt	gt
 8004088:	1a9b      	subgt	r3, r3, r2
 800408a:	18ed      	addgt	r5, r5, r3
 800408c:	341a      	adds	r4, #26
 800408e:	454d      	cmp	r5, r9
 8004090:	d11a      	bne.n	80040c8 <_printf_common+0xd8>
 8004092:	2000      	movs	r0, #0
 8004094:	e008      	b.n	80040a8 <_printf_common+0xb8>
 8004096:	2301      	movs	r3, #1
 8004098:	4652      	mov	r2, sl
 800409a:	4639      	mov	r1, r7
 800409c:	4630      	mov	r0, r6
 800409e:	47c0      	blx	r8
 80040a0:	3001      	adds	r0, #1
 80040a2:	d103      	bne.n	80040ac <_printf_common+0xbc>
 80040a4:	f04f 30ff 	mov.w	r0, #4294967295
 80040a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040ac:	3501      	adds	r5, #1
 80040ae:	e7c2      	b.n	8004036 <_printf_common+0x46>
 80040b0:	2030      	movs	r0, #48	; 0x30
 80040b2:	18e1      	adds	r1, r4, r3
 80040b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040b8:	1c5a      	adds	r2, r3, #1
 80040ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040be:	4422      	add	r2, r4
 80040c0:	3302      	adds	r3, #2
 80040c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040c6:	e7c4      	b.n	8004052 <_printf_common+0x62>
 80040c8:	2301      	movs	r3, #1
 80040ca:	4622      	mov	r2, r4
 80040cc:	4639      	mov	r1, r7
 80040ce:	4630      	mov	r0, r6
 80040d0:	47c0      	blx	r8
 80040d2:	3001      	adds	r0, #1
 80040d4:	d0e6      	beq.n	80040a4 <_printf_common+0xb4>
 80040d6:	f109 0901 	add.w	r9, r9, #1
 80040da:	e7d8      	b.n	800408e <_printf_common+0x9e>

080040dc <_printf_i>:
 80040dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80040e0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80040e4:	460c      	mov	r4, r1
 80040e6:	7e09      	ldrb	r1, [r1, #24]
 80040e8:	b085      	sub	sp, #20
 80040ea:	296e      	cmp	r1, #110	; 0x6e
 80040ec:	4617      	mov	r7, r2
 80040ee:	4606      	mov	r6, r0
 80040f0:	4698      	mov	r8, r3
 80040f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80040f4:	f000 80b3 	beq.w	800425e <_printf_i+0x182>
 80040f8:	d822      	bhi.n	8004140 <_printf_i+0x64>
 80040fa:	2963      	cmp	r1, #99	; 0x63
 80040fc:	d036      	beq.n	800416c <_printf_i+0x90>
 80040fe:	d80a      	bhi.n	8004116 <_printf_i+0x3a>
 8004100:	2900      	cmp	r1, #0
 8004102:	f000 80b9 	beq.w	8004278 <_printf_i+0x19c>
 8004106:	2958      	cmp	r1, #88	; 0x58
 8004108:	f000 8083 	beq.w	8004212 <_printf_i+0x136>
 800410c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004110:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004114:	e032      	b.n	800417c <_printf_i+0xa0>
 8004116:	2964      	cmp	r1, #100	; 0x64
 8004118:	d001      	beq.n	800411e <_printf_i+0x42>
 800411a:	2969      	cmp	r1, #105	; 0x69
 800411c:	d1f6      	bne.n	800410c <_printf_i+0x30>
 800411e:	6820      	ldr	r0, [r4, #0]
 8004120:	6813      	ldr	r3, [r2, #0]
 8004122:	0605      	lsls	r5, r0, #24
 8004124:	f103 0104 	add.w	r1, r3, #4
 8004128:	d52a      	bpl.n	8004180 <_printf_i+0xa4>
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6011      	str	r1, [r2, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	da03      	bge.n	800413a <_printf_i+0x5e>
 8004132:	222d      	movs	r2, #45	; 0x2d
 8004134:	425b      	negs	r3, r3
 8004136:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800413a:	486f      	ldr	r0, [pc, #444]	; (80042f8 <_printf_i+0x21c>)
 800413c:	220a      	movs	r2, #10
 800413e:	e039      	b.n	80041b4 <_printf_i+0xd8>
 8004140:	2973      	cmp	r1, #115	; 0x73
 8004142:	f000 809d 	beq.w	8004280 <_printf_i+0x1a4>
 8004146:	d808      	bhi.n	800415a <_printf_i+0x7e>
 8004148:	296f      	cmp	r1, #111	; 0x6f
 800414a:	d020      	beq.n	800418e <_printf_i+0xb2>
 800414c:	2970      	cmp	r1, #112	; 0x70
 800414e:	d1dd      	bne.n	800410c <_printf_i+0x30>
 8004150:	6823      	ldr	r3, [r4, #0]
 8004152:	f043 0320 	orr.w	r3, r3, #32
 8004156:	6023      	str	r3, [r4, #0]
 8004158:	e003      	b.n	8004162 <_printf_i+0x86>
 800415a:	2975      	cmp	r1, #117	; 0x75
 800415c:	d017      	beq.n	800418e <_printf_i+0xb2>
 800415e:	2978      	cmp	r1, #120	; 0x78
 8004160:	d1d4      	bne.n	800410c <_printf_i+0x30>
 8004162:	2378      	movs	r3, #120	; 0x78
 8004164:	4865      	ldr	r0, [pc, #404]	; (80042fc <_printf_i+0x220>)
 8004166:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800416a:	e055      	b.n	8004218 <_printf_i+0x13c>
 800416c:	6813      	ldr	r3, [r2, #0]
 800416e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004172:	1d19      	adds	r1, r3, #4
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6011      	str	r1, [r2, #0]
 8004178:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800417c:	2301      	movs	r3, #1
 800417e:	e08c      	b.n	800429a <_printf_i+0x1be>
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004186:	6011      	str	r1, [r2, #0]
 8004188:	bf18      	it	ne
 800418a:	b21b      	sxthne	r3, r3
 800418c:	e7cf      	b.n	800412e <_printf_i+0x52>
 800418e:	6813      	ldr	r3, [r2, #0]
 8004190:	6825      	ldr	r5, [r4, #0]
 8004192:	1d18      	adds	r0, r3, #4
 8004194:	6010      	str	r0, [r2, #0]
 8004196:	0628      	lsls	r0, r5, #24
 8004198:	d501      	bpl.n	800419e <_printf_i+0xc2>
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	e002      	b.n	80041a4 <_printf_i+0xc8>
 800419e:	0668      	lsls	r0, r5, #25
 80041a0:	d5fb      	bpl.n	800419a <_printf_i+0xbe>
 80041a2:	881b      	ldrh	r3, [r3, #0]
 80041a4:	296f      	cmp	r1, #111	; 0x6f
 80041a6:	bf14      	ite	ne
 80041a8:	220a      	movne	r2, #10
 80041aa:	2208      	moveq	r2, #8
 80041ac:	4852      	ldr	r0, [pc, #328]	; (80042f8 <_printf_i+0x21c>)
 80041ae:	2100      	movs	r1, #0
 80041b0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041b4:	6865      	ldr	r5, [r4, #4]
 80041b6:	2d00      	cmp	r5, #0
 80041b8:	60a5      	str	r5, [r4, #8]
 80041ba:	f2c0 8095 	blt.w	80042e8 <_printf_i+0x20c>
 80041be:	6821      	ldr	r1, [r4, #0]
 80041c0:	f021 0104 	bic.w	r1, r1, #4
 80041c4:	6021      	str	r1, [r4, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d13d      	bne.n	8004246 <_printf_i+0x16a>
 80041ca:	2d00      	cmp	r5, #0
 80041cc:	f040 808e 	bne.w	80042ec <_printf_i+0x210>
 80041d0:	4665      	mov	r5, ip
 80041d2:	2a08      	cmp	r2, #8
 80041d4:	d10b      	bne.n	80041ee <_printf_i+0x112>
 80041d6:	6823      	ldr	r3, [r4, #0]
 80041d8:	07db      	lsls	r3, r3, #31
 80041da:	d508      	bpl.n	80041ee <_printf_i+0x112>
 80041dc:	6923      	ldr	r3, [r4, #16]
 80041de:	6862      	ldr	r2, [r4, #4]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	bfde      	ittt	le
 80041e4:	2330      	movle	r3, #48	; 0x30
 80041e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 80041ee:	ebac 0305 	sub.w	r3, ip, r5
 80041f2:	6123      	str	r3, [r4, #16]
 80041f4:	f8cd 8000 	str.w	r8, [sp]
 80041f8:	463b      	mov	r3, r7
 80041fa:	aa03      	add	r2, sp, #12
 80041fc:	4621      	mov	r1, r4
 80041fe:	4630      	mov	r0, r6
 8004200:	f7ff fef6 	bl	8003ff0 <_printf_common>
 8004204:	3001      	adds	r0, #1
 8004206:	d14d      	bne.n	80042a4 <_printf_i+0x1c8>
 8004208:	f04f 30ff 	mov.w	r0, #4294967295
 800420c:	b005      	add	sp, #20
 800420e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004212:	4839      	ldr	r0, [pc, #228]	; (80042f8 <_printf_i+0x21c>)
 8004214:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004218:	6813      	ldr	r3, [r2, #0]
 800421a:	6821      	ldr	r1, [r4, #0]
 800421c:	1d1d      	adds	r5, r3, #4
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6015      	str	r5, [r2, #0]
 8004222:	060a      	lsls	r2, r1, #24
 8004224:	d50b      	bpl.n	800423e <_printf_i+0x162>
 8004226:	07ca      	lsls	r2, r1, #31
 8004228:	bf44      	itt	mi
 800422a:	f041 0120 	orrmi.w	r1, r1, #32
 800422e:	6021      	strmi	r1, [r4, #0]
 8004230:	b91b      	cbnz	r3, 800423a <_printf_i+0x15e>
 8004232:	6822      	ldr	r2, [r4, #0]
 8004234:	f022 0220 	bic.w	r2, r2, #32
 8004238:	6022      	str	r2, [r4, #0]
 800423a:	2210      	movs	r2, #16
 800423c:	e7b7      	b.n	80041ae <_printf_i+0xd2>
 800423e:	064d      	lsls	r5, r1, #25
 8004240:	bf48      	it	mi
 8004242:	b29b      	uxthmi	r3, r3
 8004244:	e7ef      	b.n	8004226 <_printf_i+0x14a>
 8004246:	4665      	mov	r5, ip
 8004248:	fbb3 f1f2 	udiv	r1, r3, r2
 800424c:	fb02 3311 	mls	r3, r2, r1, r3
 8004250:	5cc3      	ldrb	r3, [r0, r3]
 8004252:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004256:	460b      	mov	r3, r1
 8004258:	2900      	cmp	r1, #0
 800425a:	d1f5      	bne.n	8004248 <_printf_i+0x16c>
 800425c:	e7b9      	b.n	80041d2 <_printf_i+0xf6>
 800425e:	6813      	ldr	r3, [r2, #0]
 8004260:	6825      	ldr	r5, [r4, #0]
 8004262:	1d18      	adds	r0, r3, #4
 8004264:	6961      	ldr	r1, [r4, #20]
 8004266:	6010      	str	r0, [r2, #0]
 8004268:	0628      	lsls	r0, r5, #24
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	d501      	bpl.n	8004272 <_printf_i+0x196>
 800426e:	6019      	str	r1, [r3, #0]
 8004270:	e002      	b.n	8004278 <_printf_i+0x19c>
 8004272:	066a      	lsls	r2, r5, #25
 8004274:	d5fb      	bpl.n	800426e <_printf_i+0x192>
 8004276:	8019      	strh	r1, [r3, #0]
 8004278:	2300      	movs	r3, #0
 800427a:	4665      	mov	r5, ip
 800427c:	6123      	str	r3, [r4, #16]
 800427e:	e7b9      	b.n	80041f4 <_printf_i+0x118>
 8004280:	6813      	ldr	r3, [r2, #0]
 8004282:	1d19      	adds	r1, r3, #4
 8004284:	6011      	str	r1, [r2, #0]
 8004286:	681d      	ldr	r5, [r3, #0]
 8004288:	6862      	ldr	r2, [r4, #4]
 800428a:	2100      	movs	r1, #0
 800428c:	4628      	mov	r0, r5
 800428e:	f000 f837 	bl	8004300 <memchr>
 8004292:	b108      	cbz	r0, 8004298 <_printf_i+0x1bc>
 8004294:	1b40      	subs	r0, r0, r5
 8004296:	6060      	str	r0, [r4, #4]
 8004298:	6863      	ldr	r3, [r4, #4]
 800429a:	6123      	str	r3, [r4, #16]
 800429c:	2300      	movs	r3, #0
 800429e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042a2:	e7a7      	b.n	80041f4 <_printf_i+0x118>
 80042a4:	6923      	ldr	r3, [r4, #16]
 80042a6:	462a      	mov	r2, r5
 80042a8:	4639      	mov	r1, r7
 80042aa:	4630      	mov	r0, r6
 80042ac:	47c0      	blx	r8
 80042ae:	3001      	adds	r0, #1
 80042b0:	d0aa      	beq.n	8004208 <_printf_i+0x12c>
 80042b2:	6823      	ldr	r3, [r4, #0]
 80042b4:	079b      	lsls	r3, r3, #30
 80042b6:	d413      	bmi.n	80042e0 <_printf_i+0x204>
 80042b8:	68e0      	ldr	r0, [r4, #12]
 80042ba:	9b03      	ldr	r3, [sp, #12]
 80042bc:	4298      	cmp	r0, r3
 80042be:	bfb8      	it	lt
 80042c0:	4618      	movlt	r0, r3
 80042c2:	e7a3      	b.n	800420c <_printf_i+0x130>
 80042c4:	2301      	movs	r3, #1
 80042c6:	464a      	mov	r2, r9
 80042c8:	4639      	mov	r1, r7
 80042ca:	4630      	mov	r0, r6
 80042cc:	47c0      	blx	r8
 80042ce:	3001      	adds	r0, #1
 80042d0:	d09a      	beq.n	8004208 <_printf_i+0x12c>
 80042d2:	3501      	adds	r5, #1
 80042d4:	68e3      	ldr	r3, [r4, #12]
 80042d6:	9a03      	ldr	r2, [sp, #12]
 80042d8:	1a9b      	subs	r3, r3, r2
 80042da:	42ab      	cmp	r3, r5
 80042dc:	dcf2      	bgt.n	80042c4 <_printf_i+0x1e8>
 80042de:	e7eb      	b.n	80042b8 <_printf_i+0x1dc>
 80042e0:	2500      	movs	r5, #0
 80042e2:	f104 0919 	add.w	r9, r4, #25
 80042e6:	e7f5      	b.n	80042d4 <_printf_i+0x1f8>
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1ac      	bne.n	8004246 <_printf_i+0x16a>
 80042ec:	7803      	ldrb	r3, [r0, #0]
 80042ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042f6:	e76c      	b.n	80041d2 <_printf_i+0xf6>
 80042f8:	080045e9 	.word	0x080045e9
 80042fc:	080045fa 	.word	0x080045fa

08004300 <memchr>:
 8004300:	b510      	push	{r4, lr}
 8004302:	b2c9      	uxtb	r1, r1
 8004304:	4402      	add	r2, r0
 8004306:	4290      	cmp	r0, r2
 8004308:	4603      	mov	r3, r0
 800430a:	d101      	bne.n	8004310 <memchr+0x10>
 800430c:	2300      	movs	r3, #0
 800430e:	e003      	b.n	8004318 <memchr+0x18>
 8004310:	781c      	ldrb	r4, [r3, #0]
 8004312:	3001      	adds	r0, #1
 8004314:	428c      	cmp	r4, r1
 8004316:	d1f6      	bne.n	8004306 <memchr+0x6>
 8004318:	4618      	mov	r0, r3
 800431a:	bd10      	pop	{r4, pc}

0800431c <memcpy>:
 800431c:	b510      	push	{r4, lr}
 800431e:	1e43      	subs	r3, r0, #1
 8004320:	440a      	add	r2, r1
 8004322:	4291      	cmp	r1, r2
 8004324:	d100      	bne.n	8004328 <memcpy+0xc>
 8004326:	bd10      	pop	{r4, pc}
 8004328:	f811 4b01 	ldrb.w	r4, [r1], #1
 800432c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004330:	e7f7      	b.n	8004322 <memcpy+0x6>

08004332 <memmove>:
 8004332:	4288      	cmp	r0, r1
 8004334:	b510      	push	{r4, lr}
 8004336:	eb01 0302 	add.w	r3, r1, r2
 800433a:	d807      	bhi.n	800434c <memmove+0x1a>
 800433c:	1e42      	subs	r2, r0, #1
 800433e:	4299      	cmp	r1, r3
 8004340:	d00a      	beq.n	8004358 <memmove+0x26>
 8004342:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004346:	f802 4f01 	strb.w	r4, [r2, #1]!
 800434a:	e7f8      	b.n	800433e <memmove+0xc>
 800434c:	4283      	cmp	r3, r0
 800434e:	d9f5      	bls.n	800433c <memmove+0xa>
 8004350:	1881      	adds	r1, r0, r2
 8004352:	1ad2      	subs	r2, r2, r3
 8004354:	42d3      	cmn	r3, r2
 8004356:	d100      	bne.n	800435a <memmove+0x28>
 8004358:	bd10      	pop	{r4, pc}
 800435a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800435e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004362:	e7f7      	b.n	8004354 <memmove+0x22>

08004364 <_free_r>:
 8004364:	b538      	push	{r3, r4, r5, lr}
 8004366:	4605      	mov	r5, r0
 8004368:	2900      	cmp	r1, #0
 800436a:	d043      	beq.n	80043f4 <_free_r+0x90>
 800436c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004370:	1f0c      	subs	r4, r1, #4
 8004372:	2b00      	cmp	r3, #0
 8004374:	bfb8      	it	lt
 8004376:	18e4      	addlt	r4, r4, r3
 8004378:	f000 f8d0 	bl	800451c <__malloc_lock>
 800437c:	4a1e      	ldr	r2, [pc, #120]	; (80043f8 <_free_r+0x94>)
 800437e:	6813      	ldr	r3, [r2, #0]
 8004380:	4610      	mov	r0, r2
 8004382:	b933      	cbnz	r3, 8004392 <_free_r+0x2e>
 8004384:	6063      	str	r3, [r4, #4]
 8004386:	6014      	str	r4, [r2, #0]
 8004388:	4628      	mov	r0, r5
 800438a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800438e:	f000 b8c6 	b.w	800451e <__malloc_unlock>
 8004392:	42a3      	cmp	r3, r4
 8004394:	d90b      	bls.n	80043ae <_free_r+0x4a>
 8004396:	6821      	ldr	r1, [r4, #0]
 8004398:	1862      	adds	r2, r4, r1
 800439a:	4293      	cmp	r3, r2
 800439c:	bf01      	itttt	eq
 800439e:	681a      	ldreq	r2, [r3, #0]
 80043a0:	685b      	ldreq	r3, [r3, #4]
 80043a2:	1852      	addeq	r2, r2, r1
 80043a4:	6022      	streq	r2, [r4, #0]
 80043a6:	6063      	str	r3, [r4, #4]
 80043a8:	6004      	str	r4, [r0, #0]
 80043aa:	e7ed      	b.n	8004388 <_free_r+0x24>
 80043ac:	4613      	mov	r3, r2
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	b10a      	cbz	r2, 80043b6 <_free_r+0x52>
 80043b2:	42a2      	cmp	r2, r4
 80043b4:	d9fa      	bls.n	80043ac <_free_r+0x48>
 80043b6:	6819      	ldr	r1, [r3, #0]
 80043b8:	1858      	adds	r0, r3, r1
 80043ba:	42a0      	cmp	r0, r4
 80043bc:	d10b      	bne.n	80043d6 <_free_r+0x72>
 80043be:	6820      	ldr	r0, [r4, #0]
 80043c0:	4401      	add	r1, r0
 80043c2:	1858      	adds	r0, r3, r1
 80043c4:	4282      	cmp	r2, r0
 80043c6:	6019      	str	r1, [r3, #0]
 80043c8:	d1de      	bne.n	8004388 <_free_r+0x24>
 80043ca:	6810      	ldr	r0, [r2, #0]
 80043cc:	6852      	ldr	r2, [r2, #4]
 80043ce:	4401      	add	r1, r0
 80043d0:	6019      	str	r1, [r3, #0]
 80043d2:	605a      	str	r2, [r3, #4]
 80043d4:	e7d8      	b.n	8004388 <_free_r+0x24>
 80043d6:	d902      	bls.n	80043de <_free_r+0x7a>
 80043d8:	230c      	movs	r3, #12
 80043da:	602b      	str	r3, [r5, #0]
 80043dc:	e7d4      	b.n	8004388 <_free_r+0x24>
 80043de:	6820      	ldr	r0, [r4, #0]
 80043e0:	1821      	adds	r1, r4, r0
 80043e2:	428a      	cmp	r2, r1
 80043e4:	bf01      	itttt	eq
 80043e6:	6811      	ldreq	r1, [r2, #0]
 80043e8:	6852      	ldreq	r2, [r2, #4]
 80043ea:	1809      	addeq	r1, r1, r0
 80043ec:	6021      	streq	r1, [r4, #0]
 80043ee:	6062      	str	r2, [r4, #4]
 80043f0:	605c      	str	r4, [r3, #4]
 80043f2:	e7c9      	b.n	8004388 <_free_r+0x24>
 80043f4:	bd38      	pop	{r3, r4, r5, pc}
 80043f6:	bf00      	nop
 80043f8:	20000094 	.word	0x20000094

080043fc <_malloc_r>:
 80043fc:	b570      	push	{r4, r5, r6, lr}
 80043fe:	1ccd      	adds	r5, r1, #3
 8004400:	f025 0503 	bic.w	r5, r5, #3
 8004404:	3508      	adds	r5, #8
 8004406:	2d0c      	cmp	r5, #12
 8004408:	bf38      	it	cc
 800440a:	250c      	movcc	r5, #12
 800440c:	2d00      	cmp	r5, #0
 800440e:	4606      	mov	r6, r0
 8004410:	db01      	blt.n	8004416 <_malloc_r+0x1a>
 8004412:	42a9      	cmp	r1, r5
 8004414:	d903      	bls.n	800441e <_malloc_r+0x22>
 8004416:	230c      	movs	r3, #12
 8004418:	6033      	str	r3, [r6, #0]
 800441a:	2000      	movs	r0, #0
 800441c:	bd70      	pop	{r4, r5, r6, pc}
 800441e:	f000 f87d 	bl	800451c <__malloc_lock>
 8004422:	4a21      	ldr	r2, [pc, #132]	; (80044a8 <_malloc_r+0xac>)
 8004424:	6814      	ldr	r4, [r2, #0]
 8004426:	4621      	mov	r1, r4
 8004428:	b991      	cbnz	r1, 8004450 <_malloc_r+0x54>
 800442a:	4c20      	ldr	r4, [pc, #128]	; (80044ac <_malloc_r+0xb0>)
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	b91b      	cbnz	r3, 8004438 <_malloc_r+0x3c>
 8004430:	4630      	mov	r0, r6
 8004432:	f000 f863 	bl	80044fc <_sbrk_r>
 8004436:	6020      	str	r0, [r4, #0]
 8004438:	4629      	mov	r1, r5
 800443a:	4630      	mov	r0, r6
 800443c:	f000 f85e 	bl	80044fc <_sbrk_r>
 8004440:	1c43      	adds	r3, r0, #1
 8004442:	d124      	bne.n	800448e <_malloc_r+0x92>
 8004444:	230c      	movs	r3, #12
 8004446:	4630      	mov	r0, r6
 8004448:	6033      	str	r3, [r6, #0]
 800444a:	f000 f868 	bl	800451e <__malloc_unlock>
 800444e:	e7e4      	b.n	800441a <_malloc_r+0x1e>
 8004450:	680b      	ldr	r3, [r1, #0]
 8004452:	1b5b      	subs	r3, r3, r5
 8004454:	d418      	bmi.n	8004488 <_malloc_r+0x8c>
 8004456:	2b0b      	cmp	r3, #11
 8004458:	d90f      	bls.n	800447a <_malloc_r+0x7e>
 800445a:	600b      	str	r3, [r1, #0]
 800445c:	18cc      	adds	r4, r1, r3
 800445e:	50cd      	str	r5, [r1, r3]
 8004460:	4630      	mov	r0, r6
 8004462:	f000 f85c 	bl	800451e <__malloc_unlock>
 8004466:	f104 000b 	add.w	r0, r4, #11
 800446a:	1d23      	adds	r3, r4, #4
 800446c:	f020 0007 	bic.w	r0, r0, #7
 8004470:	1ac3      	subs	r3, r0, r3
 8004472:	d0d3      	beq.n	800441c <_malloc_r+0x20>
 8004474:	425a      	negs	r2, r3
 8004476:	50e2      	str	r2, [r4, r3]
 8004478:	e7d0      	b.n	800441c <_malloc_r+0x20>
 800447a:	684b      	ldr	r3, [r1, #4]
 800447c:	428c      	cmp	r4, r1
 800447e:	bf16      	itet	ne
 8004480:	6063      	strne	r3, [r4, #4]
 8004482:	6013      	streq	r3, [r2, #0]
 8004484:	460c      	movne	r4, r1
 8004486:	e7eb      	b.n	8004460 <_malloc_r+0x64>
 8004488:	460c      	mov	r4, r1
 800448a:	6849      	ldr	r1, [r1, #4]
 800448c:	e7cc      	b.n	8004428 <_malloc_r+0x2c>
 800448e:	1cc4      	adds	r4, r0, #3
 8004490:	f024 0403 	bic.w	r4, r4, #3
 8004494:	42a0      	cmp	r0, r4
 8004496:	d005      	beq.n	80044a4 <_malloc_r+0xa8>
 8004498:	1a21      	subs	r1, r4, r0
 800449a:	4630      	mov	r0, r6
 800449c:	f000 f82e 	bl	80044fc <_sbrk_r>
 80044a0:	3001      	adds	r0, #1
 80044a2:	d0cf      	beq.n	8004444 <_malloc_r+0x48>
 80044a4:	6025      	str	r5, [r4, #0]
 80044a6:	e7db      	b.n	8004460 <_malloc_r+0x64>
 80044a8:	20000094 	.word	0x20000094
 80044ac:	20000098 	.word	0x20000098

080044b0 <_realloc_r>:
 80044b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b2:	4607      	mov	r7, r0
 80044b4:	4614      	mov	r4, r2
 80044b6:	460e      	mov	r6, r1
 80044b8:	b921      	cbnz	r1, 80044c4 <_realloc_r+0x14>
 80044ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80044be:	4611      	mov	r1, r2
 80044c0:	f7ff bf9c 	b.w	80043fc <_malloc_r>
 80044c4:	b922      	cbnz	r2, 80044d0 <_realloc_r+0x20>
 80044c6:	f7ff ff4d 	bl	8004364 <_free_r>
 80044ca:	4625      	mov	r5, r4
 80044cc:	4628      	mov	r0, r5
 80044ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044d0:	f000 f826 	bl	8004520 <_malloc_usable_size_r>
 80044d4:	42a0      	cmp	r0, r4
 80044d6:	d20f      	bcs.n	80044f8 <_realloc_r+0x48>
 80044d8:	4621      	mov	r1, r4
 80044da:	4638      	mov	r0, r7
 80044dc:	f7ff ff8e 	bl	80043fc <_malloc_r>
 80044e0:	4605      	mov	r5, r0
 80044e2:	2800      	cmp	r0, #0
 80044e4:	d0f2      	beq.n	80044cc <_realloc_r+0x1c>
 80044e6:	4631      	mov	r1, r6
 80044e8:	4622      	mov	r2, r4
 80044ea:	f7ff ff17 	bl	800431c <memcpy>
 80044ee:	4631      	mov	r1, r6
 80044f0:	4638      	mov	r0, r7
 80044f2:	f7ff ff37 	bl	8004364 <_free_r>
 80044f6:	e7e9      	b.n	80044cc <_realloc_r+0x1c>
 80044f8:	4635      	mov	r5, r6
 80044fa:	e7e7      	b.n	80044cc <_realloc_r+0x1c>

080044fc <_sbrk_r>:
 80044fc:	b538      	push	{r3, r4, r5, lr}
 80044fe:	2300      	movs	r3, #0
 8004500:	4c05      	ldr	r4, [pc, #20]	; (8004518 <_sbrk_r+0x1c>)
 8004502:	4605      	mov	r5, r0
 8004504:	4608      	mov	r0, r1
 8004506:	6023      	str	r3, [r4, #0]
 8004508:	f7fc ff3c 	bl	8001384 <_sbrk>
 800450c:	1c43      	adds	r3, r0, #1
 800450e:	d102      	bne.n	8004516 <_sbrk_r+0x1a>
 8004510:	6823      	ldr	r3, [r4, #0]
 8004512:	b103      	cbz	r3, 8004516 <_sbrk_r+0x1a>
 8004514:	602b      	str	r3, [r5, #0]
 8004516:	bd38      	pop	{r3, r4, r5, pc}
 8004518:	20000134 	.word	0x20000134

0800451c <__malloc_lock>:
 800451c:	4770      	bx	lr

0800451e <__malloc_unlock>:
 800451e:	4770      	bx	lr

08004520 <_malloc_usable_size_r>:
 8004520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004524:	1f18      	subs	r0, r3, #4
 8004526:	2b00      	cmp	r3, #0
 8004528:	bfbc      	itt	lt
 800452a:	580b      	ldrlt	r3, [r1, r0]
 800452c:	18c0      	addlt	r0, r0, r3
 800452e:	4770      	bx	lr

08004530 <_init>:
 8004530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004532:	bf00      	nop
 8004534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004536:	bc08      	pop	{r3}
 8004538:	469e      	mov	lr, r3
 800453a:	4770      	bx	lr

0800453c <_fini>:
 800453c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453e:	bf00      	nop
 8004540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004542:	bc08      	pop	{r3}
 8004544:	469e      	mov	lr, r3
 8004546:	4770      	bx	lr
